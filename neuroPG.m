function varargout = neuroPG(varargin)
% NEUROPG MATLAB code for neuroPG.fig
%      NEUROPG, by itself, creates a new NEUROPG or raises the existing
%      singleton*.
%
%      H = NEUROPG returns the handle to a new NEUROPG or the handle to
%      the existing singleton*.
%
%      NEUROPG('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in NEUROPG.M with the given input arguments.
%
%      NEUROPG('Property','Value',...) creates a new NEUROPG or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before neuroPG_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to neuroPG_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help neuroPG

% Last Modified by GUIDE v2.5 27-Mar-2014 18:02:49

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @neuroPG_OpeningFcn, ...
                   'gui_OutputFcn',  @neuroPG_OutputFcn, ...
                   'gui_LayoutFcn',  @neuroPG_LayoutFcn, ...
                   'gui_Callback',   []);
               
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

%******************************************************************
% Opening Function and General GUI Functions

% --- Executes just before neuroPG is made visible.
function neuroPG_OpeningFcn(hObject, ~, handles, varargin)

% Choose default command line output for neuroPG
handles.output = hObject;

fpath = which('neuroPG');
fpath = fpath(1:end-9);
fname = 'neuroPG.config';
if exist([fpath,fname],'file')
    handles.settings = load([fpath,fname],'-mat');
else
    fh = configNeuroPG();
    waitfor(fh)
    pause(.1)
    if ~exist([fpath,fname],'file')
        delete(hObject)
        warndlg('Configuration File Not Found: Run configNeuroPG.m','neuroPG')
        return;
    end
    handles.settings = load([fpath,fname],'-mat');
end
handles.FilePath = fpath;

if isfield(handles.settings,'savePath')
    set(handles.PathText,'String',handles.settings.savePath);
else
    set(handles.PathText,'String',pwd);
end
if isfield(handles.settings,'fileName')
    set(handles.NameText,'String',handles.settings.fileName);
else
    set(handles.NameText,'String','');
end

handles.MainPosition = handles.settings.MainWindowPosition;
handles.CameraPosition = handles.settings.CameraWindowPosition;
handles.SmartGridPosition = handles.settings.SmartGridWindowPosition;
handles.AccessPosition = handles.settings.AccessWindowPosition;

handles.SelectedRects = []; % Minesweeper Patch Objects Selected
handles.Figure = []; % Minesweeper image Figure Handle
handles.Axes = []; % Minesweeper image Axes Handle
handles.Image = []; % Minesweeper Image Handle
handles.MSMaxAlpha = 1; % Minesweeper Alpha Scaler

handles.recTime = 1000; % Record Time for stimulations

handles.scanType = 0; % Flag for what type of scan is being run
% 0 - no recording, 1 - record ch1, 2 - record ch2, 3 - record both

handles.MaskList = [];

handles.daqs = [];
handles.daqt = [];

polyPtnSet.bitDepth = 1; % 1,2,4,or 8
polyPtnSet.PtnNumber = 1; % Total number of patterns MAX 96/bitDepth
polyPtnSet.TrigType = 0; % 0= Software, 1= Auto, 2= Ext Rise, 3= Ext Fall 
polyPtnSet.TrigDelay = 100; % Value in microseconds
polyPtnSet.TrigPeriod = 0; % Value in microseconds
polyPtnSet.ExposureTime = 2000; % Value in microseconds, 2M MAX
polyPtnSet.LEDSelection = 2; % 0= Red, 1= Green, 2= Blue
handles.polyPtnSet = polyPtnSet;

polyTrigSet.Enable = 1; % 0= disable, 1= enable
polyTrigSet.TrigDelay = 0; % Value in microseconds
polyTrigSet.TrigPulseWidth = polyPtnSet.ExposureTime;%Value in microseconds
handles.polyTrigSet = polyTrigSet;

handles.polyFlag = 0;


x = 1:256;
y = 0*x;
axes(handles.HistogramAxes)
handles.hist = bar(x,y,'k');
set(handles.hist,'tag','HistBar');
axis off

handles.ImgStack = 0;

handles.PolyXMin = 137;
set(handles.PolyMinXText,'String',num2str(handles.PolyXMin));
handles.PolyXMax = 672;
set(handles.PolyMaxXText,'String',num2str(handles.PolyXMax));
handles.PolyYMin = 157;
set(handles.PolyMinYText,'String',num2str(handles.PolyYMin));
handles.PolyYMax = 518;
set(handles.PolyMaxYText,'String',num2str(handles.PolyYMax));

handles.PatternCount = 1;
handles.LoadedPatterns = 0;

axes(handles.ThumbnailAxes)
handles.Thumbnail = imagesc(zeros(545,362,'uint8'));
axis off
colormap('Gray');

handles.NameText2 = [];

handles.GridStimFigs = 0;
handles.PairedStimFigs = 1;
guidata(hObject, handles);
t = timer('StartDelay',.1,'TimerFcn',{@OpenTimerFcn,handles.output});
start(t);


function OpenTimerFcn (obj,~,fh)
h = guidata(fh);
monitors = get(0,'Monitor');
if isempty(h.MainPosition)
    pos = [2360,178,981,814];
else
    pos = h.MainPosition;
end
if any(monitors(:,3) >= pos(1)+pos(3)) && any(monitors(:,4) >= pos(2)+pos(4))
    set(fh,'Position',pos);
end
stop(obj);
if isempty(h.AccessPosition)
    pos = [-214,818,200,200];
else
    pos = h.AccessPosition;
end
f = figure('Units','pixels', ... 
    'MenuBar','none','IntegerHandle','off','Name','GUI Access', ... 
    'NumberTitle','off','Resize','off','Tag','ControlBox');
if any(monitors(:,1) <= pos(1)) && any(monitors(:,4) >= pos(2)+pos(4))
    set(f,'Position',pos);
end
j = get(handle(f),'JavaFrame');
drawnow;
j.fHG1Client.getWindow.setAlwaysOnTop(1);
% Main GUI buttons
uicontrol('Style','PushButton','Parent',f,'Units','normalized','tag', ... 
    'B1','Position',[.05,0.7,.4,.25],'String','Show Main', ...
    'Callback',{@B1Fcn,1});
uicontrol('Style','PushButton','Parent',f,'Units','normalized','tag', ... 
    'B2','Position',[.5,0.7,.4,.25],'String','Hide Main', ...
    'Callback',{@B2Fcn,1});
% Video GUI buttons
uicontrol('Style','PushButton','Parent',f,'Units','normalized','tag', ... 
    'B1','Position',[.05,0.4,.4,.25],'String','Show Video', ...
    'Callback',{@B1Fcn,2});
uicontrol('Style','PushButton','Parent',f,'Units','normalized','tag', ... 
    'B2','Position',[.5,0.4,.4,.25],'String','Hide Video', ...
    'Callback',{@B2Fcn,2});
% Minesweeper figure buttons
uicontrol('Style','PushButton','Parent',f,'Units','normalized','tag', ... 
    'B1','Position',[.05,0.1,.4,.25],'String','Show MineS', ...
    'Callback',{@B1Fcn,3});
uicontrol('Style','PushButton','Parent',f,'Units','normalized','tag', ... 
    'B2','Position',[.5,0.1,.4,.25],'String','Hide MineS', ...
    'Callback',{@B2Fcn,3});

a(1) = isfield(h.settings,'ch1');
a(end+1) = isfield(h.settings,'ch2');
a(end+1) = isfield(h.settings,'ch3');
a(end+1) = isfield(h.settings,'pulse');
if all(a)
    a(end+1) = isfield(h.settings.ch1,'device');
    a(end+1) = isfield(h.settings.ch1,'channel');
    a(end+1) = isfield(h.settings.ch1,'range');
    a(end+1) = isfield(h.settings.ch2,'device');
    a(end+1) = isfield(h.settings.ch2,'channel');
    a(end+1) = isfield(h.settings.ch2,'range');
    a(end+1) = isfield(h.settings.ch3,'device');
    a(end+1) = isfield(h.settings.ch3,'channel');
    a(end+1) = isfield(h.settings.ch3,'range');
    a(end+1) = isfield(h.settings.pulse,'device');
    a(end+1) = isfield(h.settings.pulse,'channel');
end

if ~isempty(daq.getDevices) && all(a)
    h = guidata(fh);
    
    ch1.device = h.settings.ch1.device;
    ch1.channel = h.settings.ch1.channel;
    ch1.setting = 'Voltage';
    ch1.range = h.settings.ch1.range;
    
    ch2.device = h.settings.ch2.device;
    ch2.channel = h.settings.ch2.channel;
    ch2.setting = 'Voltage';
    ch2.range = h.settings.ch2.range;
    
    ch3.device = h.settings.ch3.device;
    ch3.channel = h.settings.ch3.channel;
    ch3.setting = 'Voltage';
    ch3.range = h.settings.ch3.range;
    
    pulse.device = h.settings.pulse.device;
    pulse.channel = h.settings.pulse.channel;
    pulse.setting = 'PulseGeneration';
    
    h.DaqTimer = [];
    
    h.daqs = daq.createSession('ni');
    h.daqs.IsContinuous = true;
    
    % Set data acquisition rate / signaling rate: MAX 1,000,000
    h.daqRate = 10000;
    h.daqs.Rate = h.daqRate;
    
    % Set number of data points to accumulate between transmissions
    % The divisor '20' will cause data to be sent 20 times per second
    h.daqFreq = 20;
    scans = floor(h.daqRate / h.daqFreq);
    h.daqs.NotifyWhenDataAvailableExceeds = scans;
    
    % Supported input ranges for common NI DAQ boards
    % ±10 V, ±5 V, ±2 V, ±1 V, ±0.5 V, ±0.2 V, ±0.1 V
    
    inCh1 = h.daqs.addAnalogInputChannel(ch1.device,ch1.channel,ch1.setting);
    % Channel 1 Signal Input
    inCh1.Range = ch1.range; 
    %Set the maximum signal range, smallest necessary for best resolution
    inCh2 = h.daqs.addAnalogInputChannel(ch2.device,ch2.channel,ch2.setting); 
    % Channel 2 Signal Input
    inCh2.Range = ch2.range;
    inCh3 = h.daqs.addAnalogInputChannel(ch3.device,ch3.channel,ch3.setting); 
    % Polygon400 Output Trigger
    inCh3.Range = ch2.range;
    
    h.DaqListener = h.daqs.addlistener('DataAvailable',@daqDataCallback);
    
    % Keep track of where in the buffer to store the next available data
    h.daqCount = 1;
    % Initialize the data buffers for 5 seconds of data
    h.daqBuffer1 = zeros(h.daqRate * 5,1);
    h.daqBuffer2 = zeros(h.daqRate * 5,1);
%     h.daqBuffer3 = zeros(h.daqRate * 5,1);
    
    h.daqPlot1 = plot(h.DaqAxes1,h.daqBuffer1);
    h.daqPlot2 = plot(h.DaqAxes2,h.daqBuffer2,'Color','r');
    
    % Set X zoom slider ranges - Min: 1 scan, Max: 5 seconds of scans
    set(h.DaqSlider1X,'Max',5*h.daqRate,'Min',...
        h.daqRate / h.daqFreq,'Value',5*h.daqRate);
    set(h.DaqSlider2X,'Max',5*h.daqRate,'Min',...
        h.daqRate / h.daqFreq,'Value',5*h.daqRate);
    
    h.daqX1 = h.daqRate * 5; % defines number of points in X
    h.daqX2 = h.daqRate * 5; % defines number of points in X
    
    h.daqY1 = 100; % defines +- range in Y
    h.daqC1 = 0; % defines center in Y
    h.daqY2 = 100; % defines +- range in Y
    h.daqC2 = 0; % defines center in Y
    
    
    % Common gain settings on MultiClamp
    % 20 mV / V
    % 400 pA / V
    h.daqFactor1 = 1;
    h.daqFactor2 = 1;
    
    % For current clamp: -60 mV would be -3 V & -100 mV would be -5 V
    % For voltage clamp: 400 pA would be 1 V & 1 mA would be 2.5 V
    
    h.daqt = daq.createSession('ni'); % Polygon Trigger Session
    
    h.daqt.addCounterOutputChannel(pulse.device,pulse.channel,pulse.setting);
    
    h.recBuffer = []; % Buffer for recording experiment data
    h.recInd = 1; % Current index to write experiment data into buffer
    
    guidata(fh,h)
    set(h.DAQCheckBox,'Enable','on');
end

delete(obj);


function B1Fcn(obj,~,id)
switch id
    case 1
        h = findall(0,'tag','PolygonGui');
    case 2
        h = findall(0,'tag','PolygonVideoGui');
        if ~isempty(h)
            h(2) = findall(0,'tag','CameraRemoteGui');
        end
    case 3
        h = findall(0,'tag','SGfig');
end
if ~isempty(h)
    set(h,'Visible','on');
end


function B2Fcn(obj,~,id)
switch id
    case 1
        h = findall(0,'tag','PolygonGui');
    case 2
        h = findall(0,'tag','PolygonVideoGui');
        if ~isempty(h)
            h(2) = findall(0,'tag','CameraRemoteGui');
        end
    case 3
        h = findall(0,'tag','SGfig');
end
if ~isempty(h)
    set(h,'Visible','off');
end


function FigResizeFcn(obj,~,imh)
po = get(obj,'UserData');
p = get(obj,'Position');
ax = get(imh,'XData');
ax = ax(2);
ay = get(imh,'YData');
ay = ay(2) - ay(1);
r = ay / ax;
y = p(2) + p(4);
if p(3) > po(3) && p(4) > po(4)
    if (p(3) == 1680 && p(4) == 988) || (p(3) == 1366 && p(4) == 746)
        p(3) = round(p(4)/r);
    elseif p(3)*r > p(4)
        p(4) = round(p(3)*r);
    else
        p(3) = round(p(4)/r);
    end
elseif p(3) > po(3) && p(4) == po(4)
    p(4) = round(p(3)*r);
elseif p(4) > po(4) && p(3) == po(3)
    p(3) = round(p(4)/r);
else
    if p(3)*r < p(4)
        p(4) = round(p(3)*r);
    else
        p(3) = round(p(4)/r);
    end
end
p(2) = y - p(4);
set(obj,'Position',p,'UserData',p);


function PairedStimTraceCRF(obj,~)
gh = findall(0,'tag','PolygonGui');
if ~isempty(gh)
    h = guidata(gh);
    h.PairedStimFigs = h.PairedStimFigs - 1;
    guidata(gh,h);
end
delete(obj);


function varargout = neuroPG_OutputFcn(~, ~, handles) 
varargout{1} = handles.output;


function PolygonGui_CloseRequestFcn(hObject, eventdata, handles)
if handles.GridStimFigs ~= 0
    close(handles.GridStimFigs);
end
h = findall(0,'tag','PolygonVideoGui');
if ~isempty(h)
    close(h);
end
if ~isempty(handles.daqs)
    stop(handles.DaqTimer);
    delete(handles.DaqTimer);
    handles.daqs.stop;
    handles.daqs.release;
    delete(handles.daqs);
end
if ~isempty(handles.daqt)
    handles.daqt.stop;
    handles.daqt.release;
    delete(handles.daqt);
end
if handles.polyFlag == 1
    polymex('DisconnectDev',0);
    polymex('UnInitDevice');
end
if ~isempty(handles.Figure) && ishandle(handles.Figure)
    delete(handles.Figure);
end
h = findall(0,'tag','ControlBox');
if ~isempty(h)
    close(h);
end
delete(hObject);


% **********************************************************************
% DAQ Graphs Functions


function DAQCheckbox_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    handles.daqs.startBackground();
    if isempty(handles.DaqTimer) || ~ishandle(handles.DaqTimer)
        handles.DaqTimer = timer('ExecutionMode','FixedRate','TimerFcn', ...
            {@DaqTimerFcn,handles.daqs},'Period',0.5);
        guidata(hObject,handles);
    end
    start(handles.DaqTimer);
else
    if ~isempty(handles.DaqTimer) && any(handles.DaqTimer == timerfind)
        stop(handles.DaqTimer);
    end
    handles.daqs.stop();
end


function DaqTimerFcn(obj,~,daqs)
if ~get(daqs,'IsRunning');
    daqs.startBackground();
end


function daqDataCallback (src,event) %#ok<*INUSL>
h = guidata(findall(0,'tag','PolygonGui'));
i = h.daqCount;
freq = h.daqFreq;
rate = h.daqRate;
points = ceil(rate / freq);
maxcount = freq * 5;
h.daqBuffer1((i-1)*points+1:(i)*points) = event.Data(:,1) .* h.daqFactor1;
h.daqBuffer2((i-1)*points+1:(i)*points) = event.Data(:,2) .* h.daqFactor2;
% h.daqBuffer3((i-1)*points+1:(i)*points) = event.Data(:,3);
if i == maxcount
    h.daqCount = 1;
else
    h.daqCount = h.daqCount + 1;
end
if h.daqX1 > i*points
    lim = [1,h.daqX1];
else
    lim = [(i*points)-h.daqX1,i*points];
end
set(h.daqPlot1,'YData',h.daqBuffer1);
set(h.DaqAxes1,'XLim',lim);
if h.daqX2 > i*points
    lim = [1,h.daqX2];
else
    lim = [(i*points)-h.daqX2,i*points];
end
set(h.daqPlot2,'YData',h.daqBuffer2);
set(h.DaqAxes2,'XLim',lim);
if h.scanType ~= 0
    recInd2 = h.recInd + numel(event.Data(:,1)) - 1;
    switch h.scanType
        case 1
            h.recBuffer(h.recInd:recInd2,1) = event.Data(:,1);
            h.recBuffer(h.recInd:recInd2,2) = 0;
            h.recBuffer(h.recInd:recInd2,3) = event.Data(:,3);
        case 2
            h.recBuffer(h.recInd:recInd2,1) = event.Data(:,2);
            h.recBuffer(h.recInd:recInd2,2) = 0;
            h.recBuffer(h.recInd:recInd2,3) = event.Data(:,3);
        case 3
            h.recBuffer(h.recInd:recInd2,1) = event.Data(:,1);
            h.recBuffer(h.recInd:recInd2,2) = event.Data(:,2);
            h.recBuffer(h.recInd:recInd2,3) = event.Data(:,3);
    end
    h.recInd = recInd2 + 1;
end
guidata(h.PolygonGui,h);


function [alpha,color,fpks,flocs] = evaluateTrace(data,channel,clamp)
% maxV = max(data);
% minV = min(data);
% difV = maxV - minV;
% if difV > .5
%     difV = .5;
% end
% alpha = difV * 2;
% color = [1,0,0];
% alpha = rand / 2 + .35;
% color = [rand,rand,rand];
d = data(:,channel) .* clamp;
f1 = sgolayfilt(d,9,51);
f1 = sgolayfilt(f1,9,11);
f1 = sgolayfilt(f1,9,51);

[fpks,flocs] = findpeaks(f1,'MinPeakDistance',10);

[~,tlocs] = findpeaks(-f1,'MinPeakDistance',10);

for i = 1:numel(flocs)
    k = find(tlocs > flocs(i),1);
    if k > 1
        j = k - 1;
        dif1 = f1(flocs(i)) - f1(tlocs(j));
        dif2 = f1(flocs(i)) - f1(tlocs(k));
        if max(dif1,dif2) < 15 || dif1 < 5
            fpks(i) = -10000;
            flocs(i) = -10000;
        end
        tlocs(1:j) = [];
    else
        fpks(i) = -10000;
        flocs(i) = -10000;
    end
end
fpks(fpks == -10000) = [];
flocs(flocs == -10000) = [];

base = mean(f1(1:100));
maxPeak = abs(max(fpks) - base);
alpha = maxPeak;
if isempty(alpha)
    alpha = 0;
end
switch numel(fpks)
    case 0
        color = [1,0,0];
    case 1
        color = [1,0,0];
    case 2
        color = [0,1,0];
    otherwise
        color = [0,0,1];
end


function DaqSlider1_Callback(hObject, eventdata, h)
h.daqY1 = 10^(get(hObject,'Value'));
guidata(hObject,h);
set(h.DaqAxes1,'YLim',[h.daqC1-h.daqY1,h.daqC1+h.daqY1]);


function DaqSlider2_Callback(hObject, eventdata, h)
h.daqY2 = 10^(get(hObject,'Value'));
guidata(hObject,h);
set(h.DaqAxes2,'YLim',[h.daqC2-h.daqY2,h.daqC2+h.daqY2]);


function DaqSlider1X_Callback(hObject, eventdata, handles)
val = get(hObject,'Value');
set(handles.TimeWindow1Text,'String',num2str(val / handles.daqRate));
handles.daqX1 = val;
guidata(hObject,handles);


function DaqSlider2X_Callback(hObject, eventdata, handles)
val = get(hObject,'Value');
set(handles.TimeWindow2Text,'String',num2str(val / handles.daqRate));
handles.daqX2 = val;
guidata(hObject,handles);


function DaqYCenter1Text_Callback(hObject, eventdata, handles)
string = get(hObject,'String');
if strcmpi(string(1),'a')
    set(hObject,'String','A');
    set(handles.Auto1Button,'Value',1);
    set(handles.DaqAxes1,'YLimMode','auto');
else
    val = str2double(string) * handles.daqFactor1;
    handles.daqC1 = val;
    os = handles.daqY1;
    guidata(hObject,handles);
    set(handles.DaqAxes1,'YLim',[val-os,val+os]);
end


function DaqYCenter2Text_Callback(hObject, eventdata, handles)
string = get(hObject,'String');
if strcmpi(string(1),'a')
    set(hObject,'String','A');
    set(handles.Auto2Button,'Value',1);
    set(handles.DaqAxes2,'YLimMode','auto');
else
    val = str2double(string) * handles.daqFactor2;
    handles.daqC2 = val;
    os = handles.daqY2;
    guidata(hObject,handles);
    set(handles.DaqAxes2,'YLim',[val-os,val+os]);
end


function TimeWindow1Text_Callback(hObject, eventdata, handles)
val = str2double(get(hObject,'String')) * handles.daqRate;
set(handles.DaqSlider1X,'Value',val);
handles.daqX1 = val;
guidata(hObject,handles);


function TimeWindow2Text_Callback(hObject, eventdata, handles)
val = str2double(get(hObject,'String')) * handles.daqRate;
set(handles.DaqSlider2X,'Value',val);
handles.daqX2 = val;
guidata(hObject,handles);


function Auto1Button_Callback(hObject, eventdata, handles)
v = get(hObject,'Value');
if v == 1
    set(handles.DaqYCenter1Text,'String','A','Enable','off');
    set(handles.DaqAxes1,'YLimMode','auto');
else
    set(handles.DaqYCenter1Text,'String','?','Enable','on');
    set(handles.DaqAxes1,'YLimMode','manual');
end


function Auto2Button_Callback(hObject, eventdata, handles)
v = get(hObject,'Value');
if v == 1
    set(handles.DaqYCenter2Text,'String','A','Enable','off');
    set(handles.DaqAxes2,'YLimMode','auto');
else
    set(handles.DaqYCenter2Text,'String','?','Enable','on');
    set(handles.DaqAxes2,'YLimMode','manual');
end


function VFactor1Text_Callback(~, ~, ~)


function AFactor1Text_Callback(~, ~, ~)


function VFactor2Text_Callback(~, ~, ~)


function AFactor2Text_Callback(~, ~, ~)


function ChannelPopup_Callback(~, ~, ~)



% _________ Create Functions _________


function DaqSlider1_CreateFcn(hObject, ~, ~)
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


function DaqSlider2_CreateFcn(hObject, ~, ~)
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


function DaqSlider1X_CreateFcn(hObject, ~, ~)
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


function DaqSlider2X_CreateFcn(hObject, ~, ~)
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


function edit2_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function DaqYCenter1Text_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function edit5_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function DaqYCenter2Text_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function TimeWindow2Text_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function TimeWindow2Label_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function TimeWindow1Text_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function TimeWindow1Label_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function AFactor2Text_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function VFactor2Text_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function AFactor1Text_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function VFactor1Text_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function ChannelPopup_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% ***********************************************************************
% Microscope Camera Functions


function CameraCheckbox_Callback(hObject, eventdata, handles)
objs1 = get(handles.CameraPanel,'Children');
objs1(objs1 == handles.HistogramAxes) = [];
objs1(objs1 == handles.VideoModePanel) = [];
objs1 = [objs1;get(handles.VideoModePanel,'Children')];
check = imaqhwinfo('hamamatsu');
if get(hObject,'Value') == 1 && ~isempty(check.DeviceIDs)
    set(objs1,'Enable','on')
%     ExposureText_Callback(handles.ExposureText,[],handles);
%     ContrastGainCheckbox_Callback(handles.ContrastGainCheckbox,[],handles);
%     LightingCheckbox_Callback(handles.LightingCheckbox,[],handles);
    CRG = CameraRemoteGui();
    handles.CRG = CRG;
    h = guidata(CRG);
    handles.ExposureText2 = h.ExposureText;
    handles.AutoButton2 = h.AutoButton;
    handles.MinHistText2 = h.MinHistText;
    handles.MaxHistText2 = h.MaxHistText;
    handles.ShowSnapCheckbox2 = h.ShowSnapCheckbox;
    handles.SaveSnapCheckbox2 = h.SaveSnapCheckbox;
    handles.CameraCheckbox2 = h.CameraCheckbox;
    handles.ContrastGainCheckbox2 = h.ContrastGainCheckbox;
    handles.LightingCheckbox2 = h.LightingCheckbox;
    handles.StackCheckbox2 = h.StackCheckbox;
    handles.VideoModePanel2 = h.VideoModePanel;
    handles.FlRB2 = h.FluorescenceRB;
    handles.BFRB2 = h.BrightFieldRB;
    handles.NameText2 = h.NameText;
    guidata(hObject,handles);
    PolygonVideoGui();
elseif isempty(check.DeviceIDs)
    set(hObject,'Value',0);
    warndlg('No Camera Detected');
    imaqreset;
else
    h = findall(0,'tag','PolygonVideoGui');
    if ~isempty(h) && isfield(handles,'vidGH')
        close(h);
    end
    h = findall(0,'tag','CameraRemoteGui');
    if ~isempty(h)
        close(h);
    end
    set(objs1,'Enable','off')
    set(hObject,'Enable','on');
end


function ExposureSlider_Callback(hObject, eventdata, handles) %#ok<*DEFNU>
a = get(hObject,'Value');
set(handles.ExposureText,'String',num2str(a));
set(handles.ExposureText2,'String',num2str(a));
if isfield(handles,'vid')
    handles.src.ExposureTime = a;
end


function ExposureText_Callback(hObject, eventdata, handles)
a = str2double(get(hObject,'String'));
if a <= 0.00001;
    a = 0.00001;
    set(hObject,'String',num2str(a));
elseif a > 2
    a = 2;
    set(hObject,'String',num2str(a));
end
set(handles.ExposureSlider,'Value',a);
if isfield(handles,'vid')
    handles.src.ExposureTime = a;
    set(handles.ExposureText2,'String',num2str(a));
end


function ContrastGainCheckbox_Callback(hObject, eventdata, handles)
a = get(hObject,'Value');
set(handles.ContrastGainCheckbox2,'Value',a);
if isfield(handles,'vid')
    handles.src.ContrastGain = a;
end


function LightingCheckbox_Callback(hObject, eventdata, handles)
a = get(hObject,'Value');
set(handles.LightingCheckbox2,'Value',a);
if isfield(handles,'vid')
    handles.src.Lighting = a;
end


function CamShowButton_Callback(hObject, eventdata, handles)
if strcmp(get(hObject,'String'),'Show')
    figure(handles.vidGH);
    set(handles.vidGH,'Visible','on');
    set(hObject,'String','Hide');
else
    set(handles.vidGH,'Visible','off');
    set(hObject,'String','Show');
end


function AutoButton_Callback(hObject, eventdata, handles)
if get(handles.AutoCheckBox,'Value') == 0
    counts = get(handles.hist,'YData');
    total = 0;
    mymin = 0;
    mymax = 255;
    for i = 1:255
        total = total + counts(i);
        if total == 0 %< 13762 % 1 percent total counts
            mymin = i;% * 256; % 256 = 65536 / 256: scale to 16 bit
        end
        if total == 1376256 && mymax == 255 % 99 percent total counts
            mymax = i;% * 256; % 256 = 65536 / 256: scale to 16 bit
            break;
        end
    end
    set(handles.MinHistText,'String',num2str(mymin));
    set(handles.MaxHistText,'String',num2str(mymax));
    set(handles.MinHistText2,'String',num2str(mymin));
    set(handles.MaxHistText2,'String',num2str(mymax));
    h = guidata(findall(0,'tag','PolygonVideoGui'));
    if ~isempty(h)
        set(h.PolyVidAxes,'CLim',[mymin,mymax]);
    end
end


function AutoCheckBox_Callback(hObject, ~, ~)
h = guidata(findall(0,'tag','PolygonVideoGui'));
if get(hObject,'Value') == 1
    set(h.PolyVidAxes,'CLimMode','auto');
else
    set(h.PolyVidAxes,'CLimMode','manual');
end


function MinHistText_Callback(hObject, eventdata, handles)
mymin = str2double(get(hObject,'String'));
mymax = str2double(get(handles.MaxHistText,'String'));
h = guidata(findall(0,'tag','PolygonVideoGui'));
if ~isempty(h)
    set(h.PolyVidAxes,'CLim',[mymin,mymax]);
    set(handles.MinHistText2,'String',num2str(mymin));
end


function MaxHistText_Callback(hObject, eventdata, handles)
mymax = str2double(get(hObject,'String'));
mymin = str2double(get(handles.MinHistText,'String'));
h = guidata(findall(0,'tag','PolygonVideoGui'));
if ~isempty(h)
    set(h.PolyVidAxes,'CLim',[mymin,mymax]);
    set(handles.MaxHistText2,'String',num2str(mymin));
end


function SaveSnapCheckBox_Callback(hObject, eventdata, handles)
set(handles.SaveSnapCheckbox2,'Value',get(hObject,'Value'));


function ShowSnapCheckBox_Callback(hObject, eventdata, handles)
set(handles.ShowSnapCheckbox2,'Value',get(hObject,'Value'));


function StackCheckbox_Callback(hObject, eventdata, handles)
set(handles.StackCheckbox2,'Value',get(hObject,'Value'));


function SnapshotButton_Callback(hObject, eventdata, handles)
if isfield(handles,'vid')
    oldExp = handles.src.ExposureTime;
    if get(handles.FluorescenceRadio,'Value') == 1
        expTime = str2double(get(handles.FlCaptureTimeText,'String'));
        handles.src.ExposureTime = expTime;
        pause(expTime*2);
    end
    img = getsnapshot(handles.vid);
    handles.src.ExposureTime = oldExp;
    if get(handles.SaveSnapCheckBox,'Value') == 1
        myPath = get(handles.PathText,'String');
        if isempty(myPath)
            myPath = uigetdir;
            set(handles.PathText,'String',myPath);
        end
        myName = get(handles.NameText,'String');
        if isempty(myName)
            resp = questdlg('Enter a Name?','Attention','Yes','No','Yes');
            switch resp
                case 'No'
                    time = clock;
                    name = [num2str(time(2)) '-' num2str(time(3)) '-' ...
                        num2str(time(4)) '-' num2str(time(5)) ... 
                        '-' num2str(round(time(6))) '.tif'];
                case 'Yes'
                    return;
            end
        else
            list = dir([myPath '\' myName '*']);
            if ~isempty(list)
                numfile = str2double(list(end).name(size(myName,2)+2:end-4));
                name = [myName '-' num2str(numfile+1) '.tif'];
            else
                name = [myName '-1.tif'];
            end
        end
        imwrite(img,[myPath '\' name]);
    end
    if get(handles.ShowSnapCheckBox,'Value') == 1
        if get(handles.StackCheckbox,'Value') == 0 || handles.ImgStack == 0
            s = size(img);
            f = figure('MenuBar','none','Units','pixels');
            ah = axes('Parent',f,'YLim',[0,s(1)],'XLim',[0,s(2)], ...
                'ButtonDownFcn',@StackBDF,'NextPlot','add', ...
                'Units','normalized','Position',[0 0 1 1],'XTick',[], ...
                'YTick',[],'YDir','reverse');
            handles.ImgStack = ah;
            guidata(hObject,handles);
            imh = imagesc(img,'Parent',ah,'HitTest','off');
            set(ah,'UserData',[1,1,imh]);
            set(f,'UserData',get(f,'Position'),'ResizeFcn', ...
                {@FigResizeFcn,imh},'CloseRequestFcn',@StackCRF);
            axis equal;
            colormap('gray');
        elseif handles.ImgStack ~= 0
            ah = handles.ImgStack;
            set(get(ah,'Children'),'Visible','off');
            imh = imagesc(img,'Parent',ah,'HitTest','off');
            ud = get(ah,'UserData');
            set(ah,'UserData',[ud(1)+1,ud(1)+1,ud(3:end),imh]);
        end
    end
end


function FlCaptureTimeText_Callback(~, ~, ~)


function StackBDF (obj,~)
switch get(get(obj,'Parent'),'SelectionType')
    case 'normal'
        ud = get(obj,'UserData');
        if ud(2) < ud(1)
            ud(2) = ud(2) + 1;
        else
            ud(2) = 1;
        end
        set(ud(3:end),'Visible','off');
        set(ud(ud(2)+2),'Visible','on');
        set(obj,'UserData',ud);
    case 'open'
        ud = get(obj,'UserData');
        if ud(2) < ud(1)
            ud(2) = ud(2) + 1;
        else
            ud(2) = 1;
        end
        set(ud(3:end),'Visible','off');
        set(ud(ud(2)+2),'Visible','on');
        set(obj,'UserData',ud);
    case 'alt'
        
    case 'extend'
        
end


function StackCRF(obj,~)
h = guidata(findall(0,'tag','PolygonGui'));
h.ImgStack = 0;
guidata(h.output,h);
delete(obj);


function VideoModePanel_SelectionChangeFcn(hObject, eventdata, handles)
if eventdata.NewValue == handles.FluorescenceRadio
    set(handles.VideoModePanel2,'SelectedObject',handles.FlRB2);
    handles.expTime = get(handles.ExposureText,'String');
    guidata(hObject,handles);
    set(handles.ExposureText,'String','0.15');
    ExposureText_Callback(handles.ExposureText, [], handles);
    set(handles.AutoCheckBox,'Value',1);
    AutoCheckBox_Callback(handles.AutoCheckBox, [], handles);
    set(handles.ContrastGainCheckbox,'Value',1);
    ContrastGainCheckbox_Callback(handles.ContrastGainCheckbox, [], handles);
    set(handles.LightingCheckbox,'Value',0);
    LightingCheckbox_Callback(handles.LightingCheckbox, [], handles);
else
    set(handles.VideoModePanel2,'SelectedObject',handles.BFRB2);
%     set(handles.AutoCheckBox,'Value',0);
%     AutoCheckBox_Callback(handles.AutoCheckBox, [], handles);
    set(handles.ExposureText,'String',handles.expTime);
    ExposureText_Callback(handles.ExposureText, [], handles);
    set(handles.ContrastGainCheckbox,'Value',0);
    ContrastGainCheckbox_Callback(handles.ContrastGainCheckbox, [], handles);
%     set(handles.LightingCheckbox,'String','1');
%     LightingCheckbox_Callback(handles.LightingCheckbox, [], handles);
end


% _________ Create Functions _________


function MinHistText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function MaxHistText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function ExposureSlider_CreateFcn(hObject, ~, ~)
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


function LightingCheckbox_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function ContrastGainCheckbox_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function FlCaptureTimeText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% ***********************************************************************
% File & Path Functions


function PathText_Callback(~, ~, ~)


function PathSelectButton_Callback(hObject, eventdata, handles)
oldPath = get(handles.PathText,'String');
myPath = uigetdir(oldPath);
if ischar(myPath)
    set(handles.PathText,'String',myPath);
else
    set(handles.PathText,'String',oldPath);
end


function NameText_Callback(hObject, eventdata, handles)
if ishandle(handles.NameText2)
    set(handles.NameText2,'String',get(hObject,'String'));
end


% _________ Create Functions _________


function PathText_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
fname = [datestr(clock,'yymmdd'),' patching'];
% V:\Dan\Electrophyiology Data
flist = dir('V:\Dan\Electrophyiology Data');
if numel(flist)
    ind = [flist(:).isdir];
    folders = {flist(ind).name}';
    if ~ismember(folders,{fname})
        mkdir('V:\Dan\Electrophyiology Data',fname);
    end
    set(hObject,'String',['V:\Dan\Electrophyiology Data\',fname]);
    handles.SavePath = get(hObject,'String');
end


function NameText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function NameLabel_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% ***********************************************************************
% ROI Functions


function PatternList_Callback(hObject, eventdata, handles)
select = get(handles.PolygonGui,'SelectionType');
switch select
    case 'normal'
        if ~isempty(handles.MaskList)
            set(handles.Thumbnail,'CData',handles.MaskList{get(hObject,'Value')});
        else
            xmax = handles.PolyXMax;
            xmin = handles.PolyXMin;
            ymax = handles.PolyYMax;
            ymin = handles.PolyYMin;
            set(handles.Thumbnail,'CData',zeros(xmax-xmin+1,ymax-ymin+1));
        end
    case 'open'
        if ~isempty(handles.MaskList)
            f = figure('MenuBar','none','Units','pixels');
            imh = imagesc(handles.MaskList{get(hObject,'Value')});
            set(f,'UserData',get(f,'Position'),'ResizeFcn', ...
                {@FigResizeFcn,imh});
            s = size(handles.MaskList{get(hObject,'Value')});
            axis equal off;
            colormap('Gray');
            set(get(imh,'Parent'),'Units','normalized','Position',[0 0 1 1]);
            set(get(imh,'Parent'),'YLim',[0,s(1)],'XLim',[0,s(2)]);
        end
%     case 'alt'
%         
%     case 'extend'
%         
end


function DeleteListItemCallback (varargin)
h = guidata(varargin{1});
if ~isempty(h.MaskList)
    select = get(h.PatternList,'Value');
    if numel(h.MaskList) == 1
        set(h.PatternList,'String','No Patterns');
        h.MaskList = [];
        guidata(h.PolygonGui,h);
        xmax = h.PolyXMax;
        xmin = h.PolyXMin;
        ymax = h.PolyYMax;
        ymin = h.PolyYMin;
        set(h.Thumbnail,'CData',zeros(xmax-xmin+1,ymax-ymin+1));
    else
        values = get(h.PatternList,'String');
        if select == numel(h.MaskList)
            set(h.PatternList,'Value',select-1);
        end
        h.MaskList = [h.MaskList(1:select-1);h.MaskList(select+1:end)];
        values(select,:) = [];
        set(h.PatternList,'String',num2str(values));
        guidata(h.PolygonGui,h);
        set(h.Thumbnail,'CData',h.MaskList{get(h.PatternList,'Value')});
    end
end


function MoveUpCallback(varargin)
h = guidata(findall(0,'tag','PolygonGui'));
pat = get(h.PatternList,'Value');
n = get(h.PatternList,'String');
ml = h.MaskList;
if numel(ml) > 1 && pat > 1
    ml = [ml(1:(pat-2));ml(pat);ml(pat-1);ml((pat+1):end)];
    n = [n(1:(pat-2));n(pat);n(pat-1);n((pat+1):end)];
    h.MaskList = ml;
    set(h.PatternList,'String',n,'Value',pat-1);
    guidata(h.output,h);
    cbf = get(h.PatternList,'Callback');
    cbf(h.PatternList,[]);
end


function MoveDownCallback(varargin)
h = guidata(findall(0,'tag','PolygonGui'));
pat = get(h.PatternList,'Value');
n = get(h.PatternList,'String');
ml = h.MaskList;
if numel(ml) > 1 && pat < numel(ml)
    ml = [ml(1:(pat-1));ml(pat+1);ml(pat);ml((pat+2):end)];
    n = [n(1:(pat-1));n(pat+1);n(pat);n((pat+2):end)];
    h.MaskList = ml;
    set(h.PatternList,'String',n,'Value',pat+1);
    guidata(h.output,h);
    cbf = get(h.PatternList,'Callback');
    cbf(h.PatternList,[]);
end


function PatternUpButton_Callback(hObject, eventdata, handles)
h = handles;
pat = get(h.PatternList,'Value');
n = get(h.PatternList,'String');
ml = h.MaskList;
if numel(ml) > 1 && pat > 1
    ml = [ml(1:(pat-2));ml(pat);ml(pat-1);ml((pat+1):end)];
    n = [n(1:(pat-2),:);n(pat,:);n(pat-1,:);n((pat+1):end,:)];
    h.MaskList = ml;
    set(h.PatternList,'String',n,'Value',pat-1);
    guidata(hObject,h);
    cbf = get(h.PatternList,'Callback');
    cbf(h.PatternList,[]);
end


function PatternDownButton_Callback(hObject, eventdata, handles)
h = handles;
pat = get(h.PatternList,'Value');
n = get(h.PatternList,'String');
ml = h.MaskList;
if numel(ml) > 1 && pat < numel(ml)
    ml = [ml(1:(pat-1));ml(pat+1);ml(pat);ml((pat+2):end)];
    n = [n(1:(pat-1),:);n(pat+1,:);n(pat,:);n((pat+2):end,:)];
    h.MaskList = ml;
    set(h.PatternList,'String',n,'Value',pat+1);
    guidata(hObject,h);
    cbf = get(h.PatternList,'Callback');
    cbf(h.PatternList,[]);
end


function ROITypePopup_Callback(~, ~, ~)


function LoadImageCheckBox_Callback(~, ~, ~)


function DefineMultipleCheckBox_Callback(~, ~, ~)


function PermuteButton_Callback(~, ~, ~)


function RandomizeButton_Callback(hObject, eventdata, handles)
order = randperm(numel(handles.MaskList));
values = get(handles.PatternList,'String');
values = values(order,:);
set(handles.PatternList,'String',values);
handles.MaskList = handles.MaskList(order);
guidata(hObject,handles);
PatternList_Callback(handles.PatternList,[],handles);


function PatternButton_Callback(hObject, eventdata, handles)
a = get(handles.LoadImageCheckBox,'Value');
b = get(handles.DefineMultipleCheckBox,'Value');
type = get(handles.ROITypePopup,'Value');
if a == 1 && b == 1
    [f,imh] = LoadImage(handles);
    if ~isempty(f)
        mask = GetMasks(f,imh,type);
    else
        mask = [];
    end
elseif a == 1
    [f,imh] = LoadImage(handles);
    if ~isempty(f)
        mask = GetOneMask(f,imh,type);
    else
        mask = [];
    end
elseif b == 1
    if isfield(handles,'vid')
        [f,imh] = LoadSnap(handles);
        mask = GetMasks(f,imh,type);
    else
        mask = [];
    end
else
    if isfield(handles,'vid')
        [f,imh] = LoadSnap(handles);
        mask = GetOneMask(f,imh,type);
    else
        mask = [];
    end
end
if isempty(handles.MaskList)
    handles.MaskList = mask;
else
    elements = numel(handles.MaskList);
    new = numel(mask);
    for i = (elements+1):(elements+new)
        handles.MaskList{i} = mask{i-elements};
    end
end
guidata(hObject,handles);
nums = (1:numel(handles.MaskList))';
if isempty(nums)
    set(handles.PatternList,'String','No ROI''s','Value',1);
else
    set(handles.PatternList,'String',num2str(nums),'Value',numel(nums));
end
PatternList_Callback(handles.PatternList,[],handles);


function [f,imh] = LoadImage (handles)
patht = [get(handles.PathText,'String'),'\'];
[name,fpath,~] = uigetfile([patht,'*.*'],'Select Image to define ROI');
if ischar(name)
    xmax = handles.PolyXMax;
    xmin = handles.PolyXMin;
    ymax = handles.PolyYMax;
    ymin = handles.PolyYMin;
    img = imresize(imread([fpath,name]),[xmax-xmin+1, ymax-ymin+1]);
    f = figure('NumberTitle','off','Name','ROI Image','Units','pixels', ...
        'MenuBar','none');
    imh = imagesc(img);
    s = size(img);
    set(f,'UserData',get(f,'Position'),'ResizeFcn',{@FigResizeFcn,imh});
    axis equal off;
    colormap('Gray');
    set(get(imh,'Parent'),'Units','normalized','Position',[0 0 1 1]);
    set(get(imh,'Parent'),'YLim',[0,s(1)],'XLim',[0,s(2)]);
else
    f = [];
    imh = [];
end


function [f,imh] = LoadSnap (handles)
xmax = handles.PolyXMax;
xmin = handles.PolyXMin;
ymax = handles.PolyYMax;
ymin = handles.PolyYMin;
img = imresize(getsnapshot(handles.vid),[xmax-xmin+1, ymax-ymin+1]);
f = figure('NumberTitle','off','Name','ROI Image','Units','pixels', ...
    'MenuBar','none');
imh = imagesc(img);
s = size(img);
set(f,'UserData',get(f,'Position'),'ResizeFcn',{@FigResizeFcn,imh});
set(get(imh,'Parent'),'YLim',[0,s(1)],'XLim',[0,s(2)]);
colormap('Gray');
axis equal off;
colormap('Gray');
set(get(imh,'Parent'), 'Units', 'normalized', 'Position', [0 0 1 1]);


function mask = GetOneMask(f,imh,type)
axes(get(imh,'Parent'));
switch type
    case 1
        ROI = imellipse;
    case 2
        ROI = imrect;
    case 3
        ROI = impoly;
end
wait(ROI);
mask{1} = uint8(createMask(ROI,imh)); % createMask is a method of impoly types
delete(f);


function mask = GetMasks(f,imh,type)
count = 1;
next = 'Yes';
axes(get(imh,'Parent'));
while strcmp(next,'Yes')
    switch type
        case 1
            ROI = imellipse;
        case 2
            ROI = imrect;
        case 3
            ROI = impoly;
    end
    wait(ROI);
    mask{count,1} = uint8(createMask(ROI,imh)); %#ok<AGROW> % createMask is a method of impoly types
    count = count + 1;
    next = questdlg('Define Another?','Continue?','Yes','No', ... 
        'Change Type','No');
    if strcmp(next,'Change Type')
        next = questdlg('Select Type','Which Type?','Ellipse', ... 
            'Rectangle','Poly','Ellipse');
        if ~isempty(next)
            switch next
                case 'Ellipse'
                    type = 1;
                case 'Rectangle'
                    type = 2;
                case 'Poly'
                    type = 3;
            end
        end
        next = 'Yes';
    end
end
delete(f);


function LoadPatternsButton_Callback(hObject, eventdata, handles)
patht = [get(handles.PathText,'String'),'\'];
[name,fpath,~] = uigetfile([patht,'*.*'],'Select Images to Load', ...
    'MultiSelect','on');
if ischar(name)
    img = imread([fpath,name]);
    xmax = handles.PolyXMax;
    xmin = handles.PolyXMin;
    ymax = handles.PolyYMax;
    ymin = handles.PolyYMin;
    if size(img) ~= [684,608] %#ok<BDSCA>
        img1 = imresize(img,[xmax-xmin+1, ymax-ymin+1]);
    else
        img1 = img(xmin:xmax,ymin:ymax);
    end
    mask{1} = logical(img1);
elseif iscell(name)
    xmax = handles.PolyXMax;
    xmin = handles.PolyXMin;
    ymax = handles.PolyYMax;
    ymin = handles.PolyYMin;
    for i = 1:numel(name)
        img = imread([fpath,name{i}]);
        if size(img) ~= [684,608] %#ok<BDSCA>
            img1 = imresize(img,[xmax-xmin+1, ymax-ymin+1]);
        else
            img1 = img(xmin:xmax,ymin:ymax);
        end
        mask{i} = logical(img1); %#ok<AGROW>
    end
else
    mask = [];
end
if isempty(handles.MaskList)
    handles.MaskList = mask;
else
    elements = numel(handles.MaskList);
    new = numel(mask);
    for i = (elements+1):(elements+new)
        handles.MaskList{i} = mask{i-elements};
    end
end
guidata(hObject,handles);
nums = (1:numel(handles.MaskList))';
if isempty(nums)
    set(handles.PatternList,'String','No ROI''s','Value',1);
else
    set(handles.PatternList,'String',num2str(nums),'Value',numel(nums));
end
PatternList_Callback(handles.PatternList,[],handles);


function SavePatternsButton_Callback(hObject, eventdata, handles)
if ~isempty(handles.MaskList)
    name = inputdlg('Enter Mask(s) Name:','Name Mask(s)',[1,35]);
    name = name{1};
    myPath = get(handles.PathText,'String');
    if isempty(myPath)
        myPath = uigetdir;
        set(handles.PathText,'String',myPath);
    end
    for i = 1:numel(handles.MaskList)
        imwrite(handles.MaskList{i},[myPath,'\',name,'-',num2str(i),'.bmp']);
    end
end


function ClearPatternButton_Callback(hObject, eventdata, handles)
set(handles.PatternList,'String','No ROI''s','Value',1);
handles.MaskList = [];
guidata(hObject,handles);
cbf = get(handles.PatternList,'Callback');
cbf(handles.PatternList,[]);


function UploadPatternsButton_Callback(hObject, eventdata, handles)
set(hObject,'BackgroundColor',[.5,.5,.5]);
ML = handles.MaskList; % ML - Mask List
ptns = numel(ML);
handles.polyPtnSet.PtnNumber = ptns;
set(handles.PatternsText,'String',num2str(ptns));
guidata(hObject,handles);
%
settings = cell2mat(struct2cell(handles.polyPtnSet));
trigsettings = cell2mat(struct2cell(handles.polyTrigSet));
trigsettings(3) = settings(6);
code = polymex('SetDevPtnSetting',0,int32(settings));
if code == -1
    warndlg('Polygon Settings Update Failed');
end
code = polymex('SetOutTrigSetting',0,int32(trigsettings));
if code == -1
    warndlg('Polygon Output Trigger Settings Update Failed');
end
%
settings = cell2mat(struct2cell(handles.polyPtnSet));
trigsettings = cell2mat(struct2cell(handles.polyTrigSet));
trigsettings(3) = settings(6);
code = polymex('SetOutTrigSetting',0,int32(trigsettings));
if code == -1
    warndlg('Polygon Output Trigger Settings Update Failed');
end
code = polymex('SetDevPtnSetting',0,int32(settings));
if code == 0
    bd = handles.polyPtnSet.bitDepth;
    PL = cell(ptns,1); % PL - Pattern List
    PL(:) = {zeros(684,608,'single')};
    x1 = str2double(get(handles.PolyMinXText,'String'));
    x2 = str2double(get(handles.PolyMaxXText,'String'));
    y1 = str2double(get(handles.PolyMinYText,'String'));
    y2 = str2double(get(handles.PolyMaxYText,'String'));
    bytes = 608 * 684 /  (8 / bd);
    PPL = zeros(bytes,ptns,'uint8'); % PPL - Packed Pattern List
    for i = 1:ptns
        PL{i}(x1:x2,y1:y2) = ML{i}(1:x2-x1+1,1:y2-y1+1);
        PPL(:,i) = bitPack(PL{i},bd);
        code = polymex('SetDevPtnDef',0,i-1,bd,PPL(:,i));
        if code == -1
            warndlg(['Pattern Load Faild on Pattern #' num2str(i)]);
            break;
        end
    end
    handles.LoadedPatterns = ptns;
    code = polymex('StartPattern',0);
    if code == -1
        warndlg('Polygon Start Pattern Failed');
    else
        set(handles.PatternList,'Value',1);
        handles.PatternCount = 0;
    end
    guidata(hObject,handles);
    set(hObject,'BackgroundColor','g')
    pause(.5);
    set(hObject,'BackgroundColor',[.9412,.9412,.9412]);
    %     disp('Patterns Loaded Successfully');
else
    warndlg('Device Pattern Settings Failed');
end


function PairedStimButton_Callback(hObject, eventdata, h)
list = h.MaskList;
if numel(list) ~= 2
    warndlg('The ROI List must conatin exactly 2 regions to run Ba-Bam!')
    return;
end
a = get(h.PolygonCheckbox,'Value');
b = get(h.DAQCheckbox,'Value');
if a == 0 || b == 0
    c = get(hObject,'BackgroundColor');
    set(hObject,'BackgroundColor','r');
    w = warndlg('Both the DAQ and the Polygon must be enabled to run Ba-Bam!');
    set(w,'Units','pixels');
    pos = get(h.output,'Position');
    pos2 = get(w,'Position');
    pos2(1) = pos(1)+100;
    pos2(2) = pos(2)+50;
    set(w,'Position',pos2);
    pause(.25);
    set(hObject,'BackgroundColor',c);
    return;
end
set(hObject,'Enable','off');
h.PairedStimt1 = 0;
h.PairedStimt2 = 0;
guidata(hObject,h);
f = figure('Units','pixels','Position',[2550,200,250,275], ... 
    'MenuBar','none','IntegerHandle','off','Name','Ba-Bam!', ... 
    'NumberTitle','off','Resize','off','tag','PairedStim');
j = get(handle(f),'JavaFrame');
drawnow;
j.fHG1Client.getWindow.setAlwaysOnTop(1);

uicontrol('Style','text','Parent',f,'Units','normalized', ... 
    'Position',[.03,0.9,.92,.1],'String', ... 
    ['Delay Time may be greater than Exposure Time', ...
    '.  In this case there will be no Overlap.'], ... 
    'HitTest','off','BackgroundColor',[.8,.8,.8]);

uicontrol('Style','text','Parent',f,'Units','normalized', ... 
    'Position',[.05,0.75,.45,.1],'String','Exposure Time:', ... 
    'HitTest','off','BackgroundColor',[.8,.8,.8]);
uicontrol('Style','text','Parent',f,'Units','normalized', ... 
    'Position',[.05,0.65,.45,.1],'String','Delay Time:', ... 
    'HitTest','off','BackgroundColor',[.8,.8,.8]);

uicontrol('Style','text','Parent',f,'Units','normalized', ... 
    'Position',[.8,0.75,.15,.1],'String','ms','HitTest','off', ...
    'BackgroundColor',[.8,.8,.8],'HorizontalAlignment','left');
uicontrol('Style','text','Parent',f,'Units','normalized', ... 
    'Position',[.8,0.65,.15,.1],'String','ms','HitTest','off', ...
    'BackgroundColor',[.8,.8,.8],'HorizontalAlignment','left');

t1 = uicontrol('Style','edit','Parent',f,'Units','normalized','String', ... 
    '0','Position',[.525,0.8,.25,.075],'HorizontalAlignment','right');
t2 = uicontrol('Style','edit','Parent',f,'Units','normalized','String', ... 
    '0','Position',[.525,0.69,.25,.075],'HorizontalAlignment','right');

uicontrol('Style','PushButton','Parent',f,'Units','normalized','String', ... 
    'Ba-Bam!','Position',[.45,0.05,.5,.1],'Callback',{@PairedStimCBF,t1,t2,h},...
    'KeyPressFcn',{@PairedStimCBF,t1,t2,h});

ax = axes('Parent',f,'Units','normalized','Position',[.11,.2,.78,.4509],...
    'XTick',[],'YTick',[]);

img = imread('PairedStim - Timing Diagram 2.png');
imshow(img,'Parent',ax);
uicontrol(t1);
uiwait(f);
h = guidata(hObject);
dt1 = h.PairedStimt1;
dt2 = h.PairedStimt2;
if dt1 == 0
    set(hObject,'Enable','on');
    return;
elseif dt1 + dt2 > 5 || h.recTime*10 > 50000
    warndlg('Total Time Exceeds Max Recording Time of 5 Seconds');
    set(hObject,'Enable','on');
    return;
end
s = size(list{1});
blank = zeros(s(1),s(2),class(list{1}));
if dt1 > dt2
    list{3} = list{2};
    list{2} = uint8(list{1} | list{2});
elseif dt1 ~= dt2
    list{3} = list{2};
    list{2} = blank;
end
list{end+1} = blank;
list{end+1} = blank;
h.MaskList = list;
h.polyPtnSet.TrigType = 2;
set(h.TriggerTypePopup,'Value',3);
oldExp = h.polyPtnSet.ExposureTime;
h.polyPtnSet.ExposureTime = 2000000; % Value in microseconds, 2M MAX
guidata(hObject,h);
cbf = get(h.UploadPatternsButton,'Callback');
cbf(h.UploadPatternsButton,[]);
if ~isempty(h.daqs3)
    h.daqs3.release;
end
time = round(max(h.recTime * 10,(dt1+dt2+.01)*10000)); % Assumes 10 kHz DAQ Rate
h.recTime = uint32(ceil(time/10));

if h.PairedStimFigs <= 0
    h.PairedStimFigs = 1;
    guidata(hObject,h);
end

if dt1 > dt2
    a = dt2;
    b = dt1 - dt2;
    c = dt1 - b;
elseif dt1 ~= dt2
    a = dt1;
    b = dt2 - dt1;
    c = dt1;
else
    a = dt1;
    b = [];
    c = dt1;
end
t = [a,b,c];

h.pCount = min(h.tCount,96);
h.picFlag = 0;
h.scanType = 3;
h.skipRecording = numel(t) + 1;
guidata(hObject,h);
rtime = max(h.recTime/1000,dt1+dt2+.01) - (dt1+dt2); % recTime is in milliseconds
h.daqs2.outputSingleScan([h.PairedStimFigs/100,h.PairedStimFigs/-100]);
tic;
h.daqsB.outputSingleScan(1);
while toc < 0.0002
end
h.daqsB.outputSingleScan(0);
for i = 1:numel(t)
    tic;
    while toc < t(i)
    end
    tic;
    h.daqsB.outputSingleScan(1);
    while toc < 0.0002
    end
    h.daqsB.outputSingleScan(0);
end
tic;
while toc < rtime
end
h.daqs2.outputSingleScan([0,0]);
tic;
h.daqsB.outputSingleScan(1);
while toc < 0.0002
end
h.daqsB.outputSingleScan(0);
h.daqsB.release;
h = guidata(hObject);
set(hObject,'Enable','on');
if dt1 ~= dt2
    h.MaskList = {list{1},list{3}};
else
    h.MaskList = {list{1},list{2}};
end
h.recTime = str2double(get(h.RecordTimeText,'String'));
guidata(hObject,h);
h.polyPtnSet.ExposureTime = oldExp;


function PairedStimCBF(obj,~,t1,t2,h)
T1 = str2double(get(t1,'String'))/1000; % Solves for time in seconds
T2 = str2double(get(t2,'String'))/1000; % Solves for time in seconds
if T1 > 2
    warndlg('Exposure Time Maximum is 2000 ms');
    return;
elseif T1 < 0 || T2 < 0
    warndlg('Times Cannot Be Negative');
    return;
else
    h.PairedStimt1 = T1;
    h.PairedStimt2 = T2;
    guidata(h.output,h);
    close(get(obj,'Parent'));
end


function AutoStimButton_Callback(hObject, eventdata, handles)
h = handles;
set(hObject,'Enable','off');
c = get(hObject,'BackgroundColor');
set(hObject,'BackgroundColor','r');
drawnow;
a = get(h.DAQCheckbox,'Value');
b = get(h.PolygonCheckbox,'Value');
if a == 0 || b == 0
    w = warndlg('Both the DAQ and the Polygon must be enabled to run AutoStim');
    set(w,'Units','pixels');
    pos = get(h.output,'Position');
    pos2 = get(w,'Position');
    pos2(1) = pos(1)+100;
    pos2(2) = pos(2)+25;
    set(w,'Position',pos2);
    pause(.25);
    set(hObject,'Enable','on','BackgroundColor',c);
    return;
end

ML = handles.MaskList; % ML - Mask List
tCount = numel(ML); % Total pattern count
PL = cell(tCount,1); % PL - Pattern List
PL(:) = {zeros(684,608,'single')};
x1 = str2double(get(handles.PolyMinXText,'String'));
x2 = str2double(get(handles.PolyMaxXText,'String'));
y1 = str2double(get(handles.PolyMinYText,'String'));
y2 = str2double(get(handles.PolyMaxYText,'String'));
bd = str2double(get(h.BitDepthText,'String'));
bytes = 608 * 684 /  (8 / bd);
ptns = zeros(bytes,tCount,'uint8');
for i = 1:tCount
    PL{i}(x1:x2,y1:y2) = ML{i}(1:x2-x1+1,1:y2-y1+1);
    ptns(:,i) = bitPack(PL{i},bd);
end
pps = h.polyPtnSet;
pps.TrigType = 2;
set(h.TriggerTypePopup,'Value',3);
pps.TrigDelay = str2double(get(h.TrigDelayText,'String'));
pps.TrigPeriod = str2double(get(h.TrigPeriodText,'String'));
pps.ExposureTime = str2double(get(h.PatternExposureText,'String')) * 1000;
pps.LEDSelection = get(h.LEDColorPopup,'Value') - 1;
set(h.BitDepthText,'String','1');
pps.bitDepth = 1;
set(h.PatternsText,'String',num2str(tCount));
if tCount > 96
    pps.PtnNumber = 96;
else
    pps.PtnNumber = tCount;
end
h.polyPtnSet = pps;
h.polyTrigSet.TrigPulseWidth = pps.ExposureTime;
guidata(hObject,h);
settings = cell2mat(struct2cell(h.polyTrigSet));
code = polymex('SetOutTrigSetting',0,int32(settings));
if code == -1
    warndlg('Output Trigger Settings update FAILED');
    set(h.SweepButton,'Enable','on');
    return;
end
settings = cell2mat(struct2cell(h.polyPtnSet));
code = polymex('SetDevPtnSetting',0,int32(settings));
if code == -1
    warndlg('Polygon Pattern Settings update FAILED');
    set(h.SweepButton,'Enable','on');
    return;
end
for i = 1:min(tCount,96)
    code = polymex('SetDevPtnDef',0,i-1,bd,ptns(:,i));
    if code == -1
        warndlg(['Pattern Load Faild on Pattern #' num2str(i)]);
        set(h.SweepButton,'Enable','on');
        return;
    end
end
% Start Patterns without initial flash
code = polymex('SetDevLEDCurrent',0,0,0,0);
if code == -1
    warndlg('Polygon LED Setting Failed');
    set(h.SweepButton,'Enable','on');
    return;
end
code = polymex('StartPattern',0);
if code == -1
    warndlg('Polygon Start Pattern Failed');
    set(h.SweepButton,'Enable','on');
    return;
end
% pause(max(pps.ExposureTime / 1000000,.01));
val = round(str2double(get(handles.LEDIntensityText,'String')) * 10);
r = 0; g = 1000; b = 0;
switch get(handles.LEDColorPopup,'Value');
    case 1
        r = val;
    case 2
        g = val;
    case 3
        b = val;
end
code = polymex('SetDevLEDCurrent',0,r,g,b);
if code == -1
    warndlg('Polygon LED Setting Failed');
    set(h.SweepButton,'Enable','on');
    return;
end

pCount = 0;
% pCount = min(h.tCount,96);
rate = 1000 / h.recTime;
pulse = h.daqt.Channels;
pulse.Frequency = rate;
pulse.DutyCycle = rate * .0002; % 0.2 ms pulse - 2 points @ 10 kHz
h.daqt.DurationInSeconds = h.recTime / 1000 * (min(tCount,96)-1);
waitTimer = timer('StartDelay',h.recTime / 1000 * min(tCount,96));
h.scanType = 3;
% dataPoints = recordTime(ms) * rateFactor(10) * totalPatterns + buffer
t = (h.recTime * 10 * tCount) + 1000 + (2000 * idivide(tCount,int8(96),'ceil'));
h.recBuffer = zeros(t,3);
pause(.1);
guidata(hObject,h);

while pCount < tCount
    pause(.1);
    h.daqt.startBackground();
    start(waitTimer);
    wait(waitTimer);
    h = guidata(hObject);
    h.scanType = 0;
    guidata(hObject,h);
    pCount = pCount + 96;
    if pCount < tCount
        if tCount > 96
            pps.PtnNumber = 96;
        else
            pps.PtnNumber = tCount;
        end
        h.polyPtnSet = pps;
        settings = cell2mat(struct2cell(h.polyPtnSet));
        code = polymex('SetDevPtnSetting',0,int32(settings));
        if code == -1
            warndlg('Polygon Pattern Settings update FAILED');
            set(h.SweepButton,'Enable','on');
            return;
        end
        for i = pCount+1:min(tCount,96)
            code = polymex('SetDevPtnDef',0,i-1,bd,ptns(:,i));
            if code == -1
                warndlg(['Pattern Load Faild on Pattern #' num2str(i)]);
                set(h.SweepButton,'Enable','on');
                return;
            end
        end
        % Start Patterns without initial flash
        code = polymex('SetDevLEDCurrent',0,0,0,0);
        if code == -1
            warndlg('Polygon LED Setting Failed');
            set(h.SweepButton,'Enable','on');
            return;
        end
        code = polymex('StartPattern',0);
        if code == -1
            warndlg('Polygon Start Pattern Failed');
            set(h.SweepButton,'Enable','on');
            return;
        end
        % pause(max(pps.ExposureTime / 1000000,.01));
        val = round(str2double(get(handles.LEDIntensityText,'String')) * 10);
        r = 0; g = 1000; b = 0;
        switch get(handles.LEDColorPopup,'Value');
            case 1
                r = val;
            case 2
                g = val;
            case 3
                b = val;
        end
        code = polymex('SetDevLEDCurrent',0,r,g,b);
        if code == -1
            warndlg('Polygon LED Setting Failed');
            set(h.SweepButton,'Enable','on');
            return;
        end
        h = guidata(hObject);
        h.daqt.DurationInSeconds = h.recTime / 1000 * (min(tCount-pCount,96)-1);
        set(waitTimer,'StartDelay',h.recTime / 1000 * min(tCount-pCount,96));
        h.scanType = 3;
        guidata(hObject,h);
    end
end
delete(waitTimer);
% Evaluate Data - clean buffer, split into stims, calc and assign IDs, generate maps
pause(.1)
h = guidata(hObject);
data = h.recBuffer;
temp1 = data(:,3) > 2;
temp2 = [false;temp1(1:end-1)];
stims = find(temp1 & ~temp2);
keep1 = stims - 200; % This changes the length of pre-stim data that is kept
keep2 = stims + h.recTime*10 - 200;
if keep2(end) > numel(data(:,1))
    keep2(end) = numel(data(:,1));
end
if numel(keep1) ~= numel(keep2)
    disp('keep size mismatch 2343');
end
traces = cell(numel(keep1),2);
for i = 1:numel(keep1)
    traces{i,1} = data(keep1(i):keep2(i),:);
    traces{i,2} = i;
end
myPath = get(h.PathText,'String');
if isempty(myPath)
    cbh = get(h.PathSelectButton,'Callback');
    cbh(h.PathSelectButton,[]);
    myPath = get(h.PathText,'String');
    if isempty(myPath)
        myPath = pwd;
    end
end
if myPath(end) ~= '\'
    myPath(end+1) = '\';
end
myName = get(h.NameText,'String');
if isempty(myName)
    myName = inputdlg('Enter save file name.','Name',1,{datestr(clock,'mmm_dd HH-MM')});
    myName = myName{1};
end
if ~isempty(myName)
    fullname = fullfile(myPath,[myName,' - traces.m']);
else
    fullname = [];
end
if ~isempty(fullname) && exist(fullname,'file')
    resp = questdlg('Overwrite existing file?','Overwrite','No');
    if strcmp(resp,'No') || strcmp(resp,'Cancel')
        myName = inputdlg('Enter save file name.','Name',1,{datestr(clock,'mmm_dd HH-MM')});
        myName = myName{1};
        if ~isempty(myName)
            fullname = fullfile(myPath,[myName,' - traces.m']);
        else
            fullname = [];
        end
    end
end
if ~isempty(fullname)
    save(fullname,'traces');
else
    myName = datestr(clock,'mmm_dd HH-MM');
end
HeatMap(traces,ML,myName,myPath);
set(hObject,'Enable','on','BackgroundColor',c);


function mask = MakeMask2(h,rects)
h = guidata(findall(0,'tag','PolygonGui'));
xmax = h.PolyXMax;
xmin = h.PolyXMin;
ymax = h.PolyYMax;
ymin = h.PolyYMin;
mask = zeros(xmax-xmin+1,ymax-ymin+1,'uint8');
for i = 1:numel(rects)
    verts = get(rects(i),'Vertices');
    wmin = verts(1,2);
    wmax = verts(4,2);
    hmin = verts(1,1);
    hmax = verts(2,1);
    mask(wmin:wmax,hmin:hmax) = 1;
end


% _________ Create Functions _________


function PatternList_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
% Define a context menu; it is not attached to anything
hcmenu = uicontextmenu;
% Define the context menu items and install their callbacks
uimenu(hcmenu,'Label','delete','Callback',{@DeleteListItemCallback});
uimenu(hcmenu,'Label','Move Up','Callback',{@MoveUpCallback});
uimenu(hcmenu,'Label','Move Down','Callback',{@MoveDownCallback});
% item2 = uimenu(hcmenu, 'Label', 'dotted', 'Callback', hcb2);
% item3 = uimenu(hcmenu, 'Label', 'solid',  'Callback', hcb3);
set(hObject,'uicontextmenu',hcmenu);


function ROITypePopup_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% ***********************************************************************
% Polygon Control & Pattern Settings Functions


function PolyMinXText_Callback(hObject, ~, ~)
val = str2double(get(hObject,'String'));
if val < 1
    val = 1;
elseif val > 684
    val = 684;
end
set(hObject,'String',num2str(val),'BackgroundColor','r');


function PolyMaxXText_Callback(hObject, ~, ~)
val = str2double(get(hObject,'String'));
if val < 1
    val = 1;
elseif val > 684
    val = 684;
end
set(hObject,'String',num2str(val),'BackgroundColor','r');


function PolyMinYText_Callback(hObject, ~, ~)
val = str2double(get(hObject,'String'));
if val < 1
    val = 1;
elseif val > 608
    val = 608;
end
set(hObject,'String',num2str(val),'BackgroundColor','r');


function PolyMaxYText_Callback(hObject, ~, ~)
val = str2double(get(hObject,'String'));
if val < 1
    val = 1;
elseif val > 608
    val = 608;
end
set(hObject,'String',num2str(val),'BackgroundColor','r');


function CommitButton_Callback(hObject, eventdata, handles)
xmax = str2double(get(handles.PolyMaxXText,'String'));
handles.PolyXMax = xmax;
xmin = str2double(get(handles.PolyMinXText,'String'));
handles.PolyXMin = xmin;
ymax = str2double(get(handles.PolyMaxYText,'String'));
handles.PolyYMax = ymax;
ymin = str2double(get(handles.PolyMinYText,'String'));
handles.PolyYMin = ymin;
if xmin >= xmax || ymin >= ymax
    warndlg('Innapropriate Values for Pattern Window');
else
    delete(handles.Thumbnail);
    axes(handles.ThumbnailAxes)
    handles.Thumbnail = imagesc(zeros(xmax-xmin+1,ymax-ymin+1,'uint8'));
    axis off
    set(handles.PolyMaxXText,'BackgroundColor','g');
    set(handles.PolyMinXText,'BackgroundColor','g');
    set(handles.PolyMaxYText,'BackgroundColor','g');
    set(handles.PolyMinYText,'BackgroundColor','g');
    guidata(hObject,handles);
end


function DefaultPatternSizeButton_Callback(hObject, eventdata, handles)
delete(handles.Thumbnail);
axes(handles.ThumbnailAxes)
handles.Thumbnail = imagesc(zeros(545,362,'uint8'));
axis off
set(handles.PolyMaxXText,'String','672','BackgroundColor','g');
set(handles.PolyMinXText,'String','128','BackgroundColor','g');
set(handles.PolyMaxYText,'String','505','BackgroundColor','g');
set(handles.PolyMinYText,'String','144','BackgroundColor','g');
handles.PolyXMax = 672;
handles.PolyXMin = 128;
handles.PolyYMax = 505;
handles.PolyYMin = 144;
guidata(hObject,handles);


function StartPatternButton_Callback(hObject, eventdata, handles)

code = polymex('StartPattern',0);
if code == -1
    warndlg('Polygon Start Pattern Failed');
else
    set(handles.PatternList,'Value',1);
    handles.PatternCount = 0;
    guidata(hObject,handles);
end


function NextPatternButton_Callback(hObject, eventdata, handles)
code = polymex('NextPattern',0);
if code == -1
    warndlg('Polygon Next Pattern Failed');
else
    ptns = handles.LoadedPatterns;
    if ptns ~= 0
        i = handles.PatternCount;
        if i == ptns
            i = 1;
        else
            i = i + 1;
        end
        if i <= size(get(handles.PatternList,'String'),1)
            set(handles.PatternList,'Value',i);
            set(handles.Thumbnail,'CData',handles.MaskList{i});
        end
        handles.PatternCount = i;
        guidata(hObject,handles);
    end
end


function StopPatternButton_Callback(~, ~, ~)
code = polymex('StopPattern',0);
if code == -1
    warndlg('Polygon Stop Pattern Failed');
end


function LEDIntensityText_Callback(hObject, eventdata, handles)
val = round(str2double(get(hObject,'String')) * 10);
r = 0; g = 1000; b = 0;
switch get(handles.LEDColorPopup,'Value');
    case 1
        r = val;
    case 2
        g = val;
    case 3
        b = val;
end
code = polymex('SetDevLEDCurrent',0,r,g,b);
if code == -1
    warndlg('Polygon LED Setting Failed');
end


function LEDColorPopup_Callback(hObject, eventdata, handles)
val = round(str2double(get(handles.LEDIntensityText,'String')) * 10);
if val > 1000
    val = 1000;
    set(handles.LEDIntensityText,'String','100');
elseif val < 0
    val = 0;
    set(handles.LEDIntensityText,'String','0');
end
handles.polyPtnSet.LEDSelection = get(hObject,'Value') - 1;
guidata(hObject,handles);
r = 0; g = 1000; b = 0;
switch get(hObject,'Value');
    case 1
        r = val;
    case 2
        g = val;
    case 3
        b = val;
end
code = polymex('SetDevLEDCurrent',0,r,g,b);
if code == -1
    warndlg('Polygon LED Setting Failed');
end


function PatternExposureText_Callback(hObject, eventdata, handles)
time = str2double(get(hObject,'String'));
if time < 0
    time = 0;
    set(hObject,'String',num2str(time));
elseif time > 2000
    time = 2000;
    set(hObject,'String',num2str(time));
end
time = time * 1000;
handles.polyPtnSet.ExposureTime = time;
guidata(hObject,handles);


function TrigDelayText_Callback(hObject, eventdata, handles)
handles.polyPtnSet.TrigDelay = str2double(get(hObject,'String'))*10;
guidata(hObject,handles);


function TrigPeriodText_Callback(hObject, eventdata, handles)
handles.polyPtnSet.TrigPeriod = str2double(get(hObject,'String'))*10;
guidata(hObject,handles);


function TriggerTypePopup_Callback(hObject, eventdata, handles)
handles.polyPtnSet.TrigType = get(hObject,'Value') - 1;
guidata(hObject,handles);


function UpdatePolygonButton_Callback(hObject, eventdata, handles)
settings = cell2mat(struct2cell(handles.polyPtnSet));
trigsettings = cell2mat(struct2cell(handles.polyTrigSet));
trigsettings(3) = settings(6);
code = polymex('SetDevPtnSetting',0,int32(settings));
if code == -1
    warndlg('Polygon Settings Update Failed');
end
code = polymex('SetOutTrigSetting',0,int32(trigsettings));
if code == -1
    warndlg('Polygon Output Trigger Settings Update Failed');
end
code = polymex('SetDevLEDCurrent',0,0,0,0);
if code == -1
    warndlg('Polygon LED Setting Failed');
end
code = polymex('StartPattern',0);
if code == -1
    warndlg('Polygon Start Pattern Failed');
else
    set(handles.PatternList,'Value',1);
    handles.PatternCount = 0;
end
r = 0; g = 1000; b = 0;
val = str2double(get(handles.LEDIntensityText,'String')) * 10;
switch get(handles.LEDColorPopup,'Value');
    case 1
        r = val;
    case 2
        g = val;
    case 3
        b = val;
end
code = polymex('SetDevLEDCurrent',0,r,g,b);
if code == -1
    warndlg('Polygon LED Setting Failed');
end


function BitDepthText_Callback(~, ~, ~)


function PatternsText_Callback(~, ~, ~)


function PolygonCheckbox_Callback(hObject, eventdata, handles)
h = get(handles.PolygonSettingsPanel,'Children');
h2 = get(handles.PolygonControlsPanel,'Children');
h3 = handles.UploadPatternsButton;
h4 = [handles.BitDepthText;handles.PatternsText];
if get(hObject,'Value') == 1
    code = polymex('InitDevice',-1,[]);
    if code == -1
        warndlg('Polygon Init Failed');
    else
        code = polymex('ConnectDev',0);
        if code == -1
            polymex('UnInitDevice');
            warndlg('Polygon Connect Failed');
        else
            code = polymex('SetDevDisplayMode',0,1);
            if code == -1
                warndlg('Polygon Pattern Mode Not Set');
                polymex('DisconnectDev',0);
                polymex('UnInitDevice');
            else
                settings = cell2mat(struct2cell(handles.polyTrigSet));
                code = polymex('SetOutTrigSetting',0,int32(settings));
                if code == -1
                    warndlg('Ploygon Output Trigger Not Set');
                    polymex('DisconnectDev',0);
                    polymex('UnInitDevice');
                else
                    handles.polyFlag = 1;
                    polymex('SetDevDisplaySetting',0,0,1);
                    guidata(hObject,handles);
                    set(h,'Enable','on');
                    set(h2,'Enable','on');
                    set(h3,'Enable','on');
                    set(h4,'Enable','off');
                end
            end
        end
    end
else
    set(h,'Enable','off');
    set(h2,'Enable','off');
    set(h3,'Enable','off');
    if handles.polyFlag == 1
        code = polymex('DisconnectDev',0);
        if code == -1
            warndlg('Disconnect Polygon Failed');
        else
            code = polymex('UnInitDevice');
            if code == -1
                warndlg('Un-Initialize Polygon Failed');
            end
        end
    end
end


% _________ Create Functions _________


function XDimsLabel_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function YDimsLabel_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function PolyMinXText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function PolyMaxXText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function PolyMinYText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function PolyMaxYText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function LEDIntensityLabel_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function LEDIntensityText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function LEDColorPopup_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function ExposureLabel_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function PatternExposureText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function TrigDelayLabel_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function TrigDelayText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function trigPeriodLabel_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function TrigPeriodText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function TriggerTypePopup_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function BitDepthLabel_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function BitDepthText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function PatternsLabel_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function PatternsText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% ***********************************************************************
% SmartGrid Functions


function SmartGridCheckbox_Callback(hObject, eventdata, handles)
objs = get(handles.SmartGrid,'Children');
if get(hObject,'Value') == 1
    mypath = get(handles.PathText,'String');
    [myfile,mypath,~] = uigetfile([mypath,'\*.*'],'Select Image');
    if ischar(myfile)
        set(objs,'Enable','on');
        handles.PolyXMax = str2double(get(handles.PolyMaxXText,'String'));
        handles.PolyXMin = str2double(get(handles.PolyMinXText,'String'));
        handles.Width = handles.PolyXMax - handles.PolyXMin;
        handles.PolyYMax = str2double(get(handles.PolyMaxYText,'String'));
        handles.PolyYMin = str2double(get(handles.PolyMinYText,'String'));
        handles.Height = handles.PolyYMax - handles.PolyYMin;
        y = handles.Width;
        x = handles.Height;
        img = imresize(imread([mypath,myfile]),[y,x]);
        opengl software;
        handles.Figure = figure('NumberTitle','off','Name','SmartGrid Map',...
            'CloseRequestFcn',{@FigureCRF,handles.output}, ...
            'MenuBar','none','Color','k','Units','pixels','tag','SMfig', ...
            'ResizeFcn',@SGResizeFcn,'Position',handles.SmartGridPosition, ...
            'IntegerHandle','off');
        set(handles.Figure,'UserData',get(handles.Figure,'Position'));
        handles.Image = imagesc(img);
        axis square off;
        colormap('Gray');
        handles.Axes = get(handles.Image,'Parent');
        myaxes = handles.Axes;
        set(myaxes,'Units','normalized', ...
            'Position',[0,0,1,1]);
        handles.Axes2 = axes('Parent',handles.Figure,'Units','normalized', ...
            'Position',[0,0,1,1],'XLim',[1,x],'YLim',[1,y],'HitTest','off', ...
            'Color','none','XTick',[],'YTick',[],'YDir','reverse');
        data.channel1{1} = 0;
        data.channel2{1} = 0;
        data.id = 1;
        data.alpha = 0;
        data.color = [1,0,0];
        patch([1,x,x,1],[1,1,y,y],'r', ...
            'FaceAlpha',0,'Parent',myaxes,'EdgeColor','r', ...
            'ButtonDownFcn',{@PatchBDF,handles.PolygonGui}, ...
            'UserData',data);
    else
        set(hObject,'Value',0);
        handles.Figure = [];
        handles.Image = [];
    end
else
    if ~isempty(handles.Figure)
        delete(handles.Figure);
        handles.Figure = [];
    end
    set(objs,'Enable','off');
    set(hObject,'Enable','on');
end
handles.MSMaxAlpha = 1;
guidata(hObject,handles);


function SGShowButton_Callback(hObject, eventdata, handles)
if strcmp(get(hObject,'String'),'Show')
    figure(handles.Figure);
    set(handles.Figure,'Visible','on');
    set(hObject,'String','Hide');
else
    set(handles.Figure,'Visible','off');
    set(hObject,'String','Show');
end


function RowsText_Callback(~, ~, ~)


function ColumnsText_Callback(~, ~, ~)


function SegmentButton_Callback(hObject, eventdata, handles)
h = handles;
if h.GridStimFigs ~= 0
    close(h.GridStimFigs);
end
data.channel1{1} = 0;
data.channel2{1} = 0;
data.id = 0;
data.alpha = 0;
data.color = [1,0,0];
for k = 1:numel(h.SelectedRects)
    verts = get(h.SelectedRects(k),'Vertices');
    delete(h.SelectedRects(k));
    xmin = verts(1,1);
    xmax = verts(2,1);
    x = xmax - xmin;
    ymin = verts(1,2);
    ymax = verts(4,2);
    y = ymax - ymin;
    numrows = str2double(get(h.RowsText,'String'));
    numcols = str2double(get(h.ColumnsText,'String'));
    xstep = floor(x / numcols);
    ystep = floor(y / numrows);
    xmins = xmin:xstep:xmax;
    xmaxes = (xmin+xstep-1):xstep:xmax;
    xmaxes(end) = xmax;
    ymins = ymin:ystep:ymax;
    ymaxes = (ymin+ystep-1):ystep:ymax;
    ymaxes(end) = ymax;
    for i = 1:numrows
        for j = 1:numcols
            patch([xmins(j),xmaxes(j),xmaxes(j),xmins(j)],...
                [ymins(i),ymins(i),ymaxes(i),ymaxes(i)],'r', ...
                'FaceAlpha',0,'Parent',h.Axes,'EdgeColor','r', ...
                'ButtonDownFcn',{@PatchBDF,handles.output}, ...
                'UserData',data);
        end
    end
end
h.SelectedRects = [];
guidata(hObject,h);
rects = findall(h.Axes,'type','patch');
for i = 1:numel(rects)
    data = get(rects(i),'UserData');
    data.id = i;
    set(rects(i),'UserData',data);
end


function CombineButton_Callback(hObject, eventdata, handles)
h = handles;
if numel(h.SelectedRects) > 1
    verts = get(h.SelectedRects,'Vertices');
    xmins = zeros(numel(verts),1);
    xmaxes = zeros(numel(verts),1);
    ymins = zeros(numel(verts),1);
    ymaxes = zeros(numel(verts),1);
    for i = 1:numel(verts)
        xmins(i) = verts{i}(1,1);
        xmaxes(i) = verts{i}(2,1);
        ymins(i) = verts{i}(1,2);
        ymaxes(i) = verts{i}(4,2);
    end
    xmins = unique(xmins);
    xmaxes = unique(xmaxes);
    ymins = unique(ymins);
    ymaxes = unique(ymaxes);
    allRects = findall(h.Axes,'type','patch');
    if numel(xmins)*numel(ymins) == numel(h.SelectedRects)  || ...
            numel(allRects) == numel(h.SelectedRects)
        if h.GridStimFigs ~= 0
            close(h.GridStimFigs);
        end
        xmin = min(xmins);
        xmax = max(xmaxes);
        ymin = min(ymins);
        ymax = max(ymaxes);
        for i = numel(allRects):-1:1
            verts = get(allRects(i),'Vertices');
            x = verts(:,1);
            y = verts(:,2);
            if ~all([xmin<=x;xmax>=x;ymin<=y;ymax>=y])
                allRects(i) = [];
            end
        end
        delete(allRects);
        data.channel1{1} = 0;
        data.channel2{1} = 0;
        data.id = 0;
        data.alpha = 0;
        data.color = [1,0,0];
        h.SelectedRects = patch([xmin,xmax,xmax,xmin],...
            [ymin,ymin,ymax,ymax],'r', ...
            'FaceAlpha',0,'Parent',h.Axes,'EdgeColor','g', ...
            'ButtonDownFcn',{@PatchBDF,handles.output}, ...
            'UserData',data);
        guidata(hObject,h);
        rects = findall(h.Axes,'type','patch');
        for i = 1:numel(rects)
            data = get(rects(i),'UserData');
            data.id = i;
            set(rects(i),'UsesrData',data);
        end
    end
end


function AllButton_Callback(hObject, eventdata, handles)
h = handles;
rects = findall(h.Axes,'type','patch');
set(rects,'EdgeColor','g');
h.SelectedRects = rects;
guidata(hObject,h);


function NoneButton_Callback(hObject, eventdata, handles)
h = handles;
rects = findall(h.Axes,'type','patch');
set(rects,'EdgeColor','r');
h.SelectedRects = [];
guidata(hObject,h);


function ExportGroupedButton_Callback(hObject, eventdata, handles)
h = handles;
list = h.SelectedRects;
mask = cell(1,1);
mask{1} = MakeMask2(h,list);
if isempty(handles.MaskList)
    handles.MaskList = mask;
else
    handles.MaskList{end+1} = mask{1};
end
guidata(hObject,handles);
nums = (1:numel(handles.MaskList))';
if isempty(nums)
    set(handles.PatternList,'String','No ROI''s','Value',1);
else
    set(handles.PatternList,'String',num2str(nums),'Value',numel(nums));
end
PatternList_Callback(handles.PatternList,[],handles);


function ExportPatternsButton_Callback(hObject, eventdata, handles)
list = handles.SelectedRects;
tCount = numel(list); % Total pattern count
masks = cell(tCount,1);
for i = 1:tCount
    masks{i} = MakeMask2(handles,list(i));
end
if isempty(handles.MaskList)
    handles.MaskList = masks;
else
    elements = numel(handles.MaskList);
    new = numel(masks);
    for i = (elements+1):(elements+new)
        handles.MaskList{i} = masks{i-elements};
    end
end
guidata(hObject,handles);
nums = (1:numel(handles.MaskList))';
if isempty(nums)
    set(handles.PatternList,'String','No ROI''s','Value',1);
else
    set(handles.PatternList,'String',num2str(nums),'Value',numel(nums));
end
PatternList_Callback(handles.PatternList,[],handles);


function SGSavePatternsButton_Callback(hObject, eventdata, handles)
h = handles;
list = h.SelectedRects;
if ~isempty(list)
    name = inputdlg('Enter Mask(s) Name:','Name Mask(s)',[1,35]);
    name = name{1};
    myPath = get(h.PathText,'String');
    if isempty(myPath)
        myPath = uigetdir;
        set(h.PathText,'String',myPath);
    end
    for i = 1:numel(list)
        masks{i} = logical(MakeMask(h,list(i))); %#ok<AGROW>
        imwrite(masks{i},[myPath,name,'-',num2str(i),'.bmp']);
    end
end


function RecordTimeText_Callback(hObject, eventdata, handles)
val = str2double(get(hObject,'String'));
if val < 0
    val = 0;
elseif val > 50000
    val = 50000;
end
set(hObject,'String',num2str(val));
handles.recTime = val;
guidata(hObject,handles);


function GridStimButton_Callback(hObject, eventdata, handles)
h = handles;
set(hObject,'Enable','off');
drawnow;
a = get(h.DAQCheckbox,'Value');
b = get(h.PolygonCheckbox,'Value');
if a == 0 || b == 0
    c = get(hObject,'BackgroundColor');
    set(hObject,'BackgroundColor','r');
    w = warndlg('Both the DAQ and the Polygon must be enabled to run Minesweeper');
    set(w,'Units','pixels');
    pos = get(h.output,'Position');
    pos2 = get(w,'Position');
    pos2(1) = pos(1)+200;
    pos2(2) = pos(2)+25;
    set(w,'Position',pos2);
    pause(.25);
    set(hObject,'Enable','on','BackgroundColor',c);
    return;
end
list = h.SelectedRects;
tCount = numel(list); % Total pattern count
masks = zeros(684,608,tCount,'uint8');
ptns = zeros(51984,tCount,'uint8');
order = randperm(tCount);
list = list(order);
for i = 1:tCount
    masks(:,:,i) = MakeMask(h,list(i));
end
name = [get(h.PathText,'String'),'\Sweep Patterns ',datestr(clock,'mmm_dd HH-MM')];
save(name,'masks');
for i = 1:tCount
    ptns(:,i) = bitPack(masks(:,:,i),1);
end
pps = h.polyPtnSet;
pps.TrigType = 2;
set(h.TriggerTypePopup,'Value',3);
pps.TrigDelay = str2double(get(h.TrigDelayText,'String'));
pps.TrigPeriod = str2double(get(h.TrigPeriodText,'String'));
pps.ExposureTime = str2double(get(h.PatternExposureText,'String')) * 1000;
pps.LEDSelection = get(h.LEDColorPopup,'Value') - 1;
set(h.BitDepthText,'String','1');
pps.bitDepth = 1;
set(h.PatternsText,'String',num2str(tCount));
if tCount > 96
    pps.PtnNumber = 96;
else
    pps.PtnNumber = tCount;
end
h.polyPtnSet = pps;
h.polyTrigSet.TrigPulseWidth = pps.ExposureTime;
guidata(hObject,h);
settings = cell2mat(struct2cell(h.polyTrigSet));
code = polymex('SetOutTrigSetting',0,int32(settings));
if code == -1
    warndlg('Output Trigger Settings update FAILED');
    set(h.SweepButton,'Enable','on');
    return;
end
settings = cell2mat(struct2cell(h.polyPtnSet));
code = polymex('SetDevPtnSetting',0,int32(settings));
if code == -1
    warndlg('Polygon Pattern Settings update FAILED');
    set(h.SweepButton,'Enable','on');
    return;
end
bd = str2double(get(h.BitDepthText,'String'));
for i = 1:min(tCount,96)
    code = polymex('SetDevPtnDef',0,i-1,bd,ptns(:,i));
    if code == -1
        warndlg(['Pattern Load Faild on Pattern #' num2str(i)]);
        set(h.SweepButton,'Enable','on');
        return;
    end
end
% Start Patterns without initial flash
code = polymex('SetDevLEDCurrent',0,0,0,0);
if code == -1
    warndlg('Polygon LED Setting Failed');
end
code = polymex('StartPattern',0);
if code == -1
    warndlg('Polygon Start Pattern Failed');
    set(h.SweepButton,'Enable','on');
    return;
end
% pause(max(pps.ExposureTime / 1000000,.01));
val = round(str2double(get(handles.LEDIntensityText,'String')) * 10);
r = 0; g = 1000; b = 0;
switch get(handles.LEDColorPopup,'Value');
    case 1
        r = val;
    case 2
        g = val;
    case 3
        b = val;
end
code = polymex('SetDevLEDCurrent',0,r,g,b);
if code == -1
    warndlg('Polygon LED Setting Failed');
    set(h.SweepButton,'Enable','on');
    return;
end

pCount = 0;

rate = 1000 / h.recTime;

pulse = h.daqt.Channels;
pulse.Frequency = rate;
pulse.DutyCycle = rate * .0002; % 0.2 ms pulse - 2 points @ 10 kHz
h.daqt.DurationInSeconds = h.recTime / 1000 * (min(tCount,96)-1);
h.scanType = 3;
% dataPoints = recordTime(ms) * rateFactor(10) * totalPatterns + buffer
t = (h.recTime * 10 * tCount) + 1000 + (2000 * idivide(tCount,int8(96),'ceil'));
h.recBuffer = zeros(t,3);
guidata(hObject,h);

while pCount < tCount
    pause(.1);
    h.daqt.startBackground();
    pause(h.recTime / 1000 * (min(tCount,96)+1));
    h = guidata(hObject);
    h.scanType = 0;
    guidata(hObject,h);
    pCount = pCount + 96;
    if pCount < tCount
        if tCount > 96
            pps.PtnNumber = 96;
        else
            pps.PtnNumber = tCount;
        end
        h.polyPtnSet = pps;
        settings = cell2mat(struct2cell(h.polyPtnSet));
        code = polymex('SetDevPtnSetting',0,int32(settings));
        if code == -1
            warndlg('Polygon Pattern Settings update FAILED');
            set(h.SweepButton,'Enable','on');
            return;
        end
        for i = pCount+1:min(tCount,96)
            code = polymex('SetDevPtnDef',0,i-1,bd,ptns(:,i));
            if code == -1
                warndlg(['Pattern Load Faild on Pattern #' num2str(i)]);
                set(h.SweepButton,'Enable','on');
                return;
            end
        end
        % Start Patterns without initial flash
        code = polymex('SetDevLEDCurrent',0,0,0,0);
        if code == -1
            warndlg('Polygon LED Setting Failed');
            set(h.SweepButton,'Enable','on');
            return;
        end
        code = polymex('StartPattern',0);
        if code == -1
            warndlg('Polygon Start Pattern Failed');
            set(h.SweepButton,'Enable','on');
            return;
        end
        % pause(max(pps.ExposureTime / 1000000,.01));
        val = round(str2double(get(handles.LEDIntensityText,'String')) * 10);
        r = 0; g = 1000; b = 0;
        switch get(handles.LEDColorPopup,'Value');
            case 1
                r = val;
            case 2
                g = val;
            case 3
                b = val;
        end
        code = polymex('SetDevLEDCurrent',0,r,g,b);
        if code == -1
            warndlg('Polygon LED Setting Failed');
            set(h.SweepButton,'Enable','on');
            return;
        end
        h = guidata(hObject);
        h.daqt.DurationInSeconds = h.recTime / 1000 * (min(tCount-pCount,96)-1) ;
        h.scanType = 3;
        guidata(hObject,h);
    end
end
h = guidata(hObject);
h.scanType = 0;
guidata(hObject,h);
% Evaluate Data - clean buffer, split into stims, calc and assign IDs, generate maps
pause(.1)
h = guidata(hObject);
data = h.recBuffer;
temp1 = data(:,3) > 2;
temp2 = [false;temp1(1:end-1)];
stims = find(temp1 & ~temp2);
keep1 = stims - 200; % This changes the length of pre-stim data that is kept
keep2 = stims + h.recTime*10;
if keep2(end) > numel(data(:,1))
    keep2(end) = numel(data(:,1));
end
traces = cell(numel(keep1),2);
for i = 1:numel(keep1)
    traces{i,1} = data(keep1(i):keep2(i),:);
    traces{i,2} = i;
end
for i = 1:size(traces,1)
    UD = get(list(i),'UserData');
    if UD.channel1{1} == 0
        UD.channel1{1} = traces{i,1}(:,1);
        UD.channel2{1} = traces{i,1}(:,2);
    else
        UD.channel1{end+1} = traces{i,1}(:,1);
        UD.channel2{end+1} = traces{i,1}(:,2);
    end
    [alpha,color,~,~] = evaluateTrace(traces{i,1},1,1);
    UD.alpha = UD.alpha + alpha;
    newAlpha = min(1,(UD.alpha / h.MSMaxAlpha));
    if UD.color ~= [0,0,1] %#ok<BDSCA>
        if color ~= [1,0,0] %#ok<BDSCA>
            UD.color = color;
        end
    end
    set(list(i),'FaceAlpha',newAlpha)
    set(list(i),'FaceColor',UD.color)
    set(list(i),'UserData',UD);
end

set(hObject,'Enable','on');


function SaveHeatmapButton_Callback(hObject, eventdata, handles)
name = inputdlg('Enter File Name','Name');
fname = [handles.SavePath,'\',name,'.fig'];
saveas(handles.Figure,fname,'fig');


function ClearHeatmapButton_Callback(hObject, eventdata, handles)
h = handles;
rects = findall(h.Axes,'type','patch');
data.channel1 = {0};
data.channel2 = {0};
data.alpha = 0;
data.color = [1,0,0];
for i = 1:numel(rects)
    d = get(rects(i),'UserData');
    data.id = d.id;
    set(rects(i),'FaceAlpha',0,'FaceColor','r','UserData',data);
end


function AlphaScaleText_Callback(hObject, eventdata, handles)
h = handles;
a = str2double(get(hObject,'String'));
rects = findall(h.Axes,'type','patch');
for i = 1:numel(rects)
    data = get(rects(i),'UserData');
    newAlpha = min(1,data.alpha / a);
    set(rects(i),'FaceAlpha',newAlpha);
end


function mask = MakeMask(h,rects)
mask = zeros(684,608,'uint8');
hoff = h.PolyYMin;
woff = h.PolyXMin;
for i = 1:numel(rects)
    verts = get(rects(i),'Vertices');
    wmin = verts(1,2) + woff;
    wmax = verts(4,2) + woff;
    hmin = verts(1,1) + hoff;
    hmax = verts(2,1) + hoff;
    mask(wmin:wmax,hmin:hmax) = 1;
end


function PatchBDF(obj,~,gui)
if ishghandle(gui)
    h = guidata(gui);
else
    h = [];
end
switch get(h.Figure,'SelectionType')
    case 'normal'
        if ~isempty(h)
            if get(obj,'EdgeColor') == [1,0,0] %#ok<BDSCA>
                if numel(h.SelectedRects) > 0
                    set(h.SelectedRects,'EdgeColor','r');
                end
                set(obj,'EdgeColor','g');
                h.SelectedRects = (obj);
            else
                set(h.SelectedRects,'EdgeColor','r');
                h.SelectedRects = [];
            end
        end
    case 'extend'
        if ~isempty(h)
            if get(obj,'EdgeColor') == [1,0,0] %#ok<BDSCA>
                set(obj,'EdgeColor','g');
                h.SelectedRects(end+1) = (obj);
            else
                set(obj,'EdgeColor','r');
                h.SelectedRects(h.SelectedRects == obj) = [];
            end
        end
    case 'alt'
        data = get(obj,'UserData');
        ch1 = data.channel1;
        ch2 = data.channel2;
        if numel(ch1{1} > 1)
            verts = get(obj,'Vertices');
            vx = mean(verts(:,1));
            difx = max(verts(:,1)) - min(verts(:,1));
            vy = mean(verts(:,2));
            dify = max(verts(:,2)) - min(verts(:,2));
            if difx > 20 && dify > 20
                fs = 16;
            else
                fs = 10;
            end
            index = data.id;
            th = text(vx,vy,num2str(index),'Parent',h.Axes2, ...
                'Color','m','HorizontalAlignment','center', ...
                'VerticalAlignment','middle', ...
                'FontSize',fs);
            f = figure;
            if ~isempty(h)
                if h.GridStimFigs == 0
                    h.GridStimFigs = f;
                else
                    h.GridStimFigs(end+1) = f;
                end
                guidata(h.output,h);
            end
            set(f,'Name',['GridStim Trace ' num2str(index)], ... 
                'NumberTitle','off','CloseRequestFcn',{@GridStimTraceCRF,th});
            plot(ch1{1},'HitTest','off','Color','b');
            hold all
            for i = 2:numel(ch1)
                plot(ch1{i},'HitTest','off','Color','b');
            end
            for i = 1:numel(ch2)
                plot(ch2{i},'Color','r','HitTest','off','Visible','off');
            end
            hold off
            axis tight
            xlim([1,numel(ch1{1})]);
            ylim([-.1,.1]);
% ************************** Change pos(1&2) to change monitor position
            pos = [1700,542,1120,420];
            set(f,'Position',pos);
            ah = get(f,'Children');
            % Assuming DAQ Rate = 10 kHz
            xlabel = num2str(str2num(get(ah,'XTickLabel')) ./ 10); %#ok<ST2NM>
            set(ah,'LooseInset',get(ah,'TightInset'),'XTickLabel',xlabel);
            set(ah,'ButtonDownFcn',@traceBDF);
        end
end
if ~isempty(h)
    guidata(gui,h);
end


function traceBDF (obj,~)
switch get(get(obj,'Parent'),'SelectionType')
    case 'extend'
        if strcmp(get(obj,'YLimMode'),'manual')
            set(obj,'YLimMode','auto');
        else
            set(obj,'YLimMode','manual','YLim',[-.1,.1]);
        end
    case 'alt'
        c = get(obj,'Children');
        c1 = find(strcmp(get(c,'Visible'),'off'));
        set(c,'Visible','off');
        set(c1,'Visible','on');
end


function GridStimTraceCRF(obj,~,th)
gh = findall(0,'tag','PolygonGui');
if ~isempty(gh)
    h = guidata(gh);
    if numel(h.GridStimFigs > 1)
        ind = find(h.GridStimFigs == obj,1);
        h.GridStimFigs(ind) = [];
    else
        h.GridStimFigs = 0;
    end
    guidata(gh,h);
end
if ishandle(th)
    delete(th);
end
delete(obj);


function SGResizeFcn(obj,~)
po = get(obj,'UserData');
p = get(obj,'Position');
y = p(2) + p(4);
if p(3) > po(3) && p(4) > po(4)
    if (p(3) == 1680 && p(4) == 988) || (p(3) == 1366 && p(4) == 746)
        p(3) = p(4);
    elseif p(3) > p(4)
        p(4) = p(3);
    else
        p(3) = p(4);
    end
elseif p(3) > po(3) && p(4) == po(4)
    p(4) = p(3);
elseif p(4) > po(4) && p(3) == po(3)
    p(3) = p(4);
else
    if p(3) < p(4)
        p(4) = p(3);
    else
        p(3) = p(4);
    end
end
p(2) = y - p(4);
set(obj,'Position',p,'UserData',p);


function FigureCRF(obj,~,gh)
if ishghandle(gh)
    h = guidata(gh);
    set(h.SmartGridCheckbox,'Value',0);
    cbf = get(h.SmartGridCheckbox,'Callback');
    cbf(h.SmartGridCheckbox,[]);
    h.SelectedRects = [];
    guidata(h.PolygonGui,h);
else
    delete(obj)
end


% _________ Create Functions _________


function RowsText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function ColumnsText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function RecordTimeText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function AlphaScaleText_CreateFcn(hObject, ~, ~)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- If Enable == 'on', executes on mouse press in 5 pixel border.
% --- Otherwise, executes on mouse press in 5 pixel border or over PatternButton.
function PatternButton_ButtonDownFcn(hObject, eventdata, handles)


% --- Creates and returns a handle to the GUI figure. 
function h1 = neuroPG_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end
load neuroPG.mat


appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'uipanel', 14, ...
    'pushbutton', 40, ...
    'radiobutton', 17, ...
    'slider', 11, ...
    'text', 28, ...
    'edit', 44, ...
    'checkbox', 14, ...
    'axes', 5, ...
    'listbox', 2, ...
    'popupmenu', 5, ...
    'togglebutton', 3), ...
    'override', 0, ...
    'release', 13, ...
    'resize', 'none', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 1, ...
    'blocking', 0, ...
    'lastSavedFile', 'V:\RobinsonLab Code\MATLAB Code\neuroPG\neuroPG.m', ...
    'lastFilename', 'V:\RobinsonLab Code\MATLAB Code\neuroPG\neuroPGGUIDE.fig');
appdata.lastValidTag = 'PolygonGui';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'PolygonGui');

h1 = figure(...
'CloseRequestFcn',@(hObject,eventdata)neuroPG('PolygonGui_CloseRequestFcn',hObject,eventdata,guidata(hObject)),...
'Color',[0.941176470588235 0.941176470588235 0.941176470588235],...
'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
'IntegerHandle','off',...
'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
'MenuBar','none',...
'Name','neuroPGGUIDE',...
'NumberTitle','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'Position',[2366 196 971 804],...
'Resize','off',...
'HandleVisibility','callback',...
'UserData',[],...
'Tag','PolygonGui',...
'Visible','on',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'PolygonSettingsPanel';

h2 = uipanel(...
'Parent',h1,...
'Units','characters',...
'Title','Polygon Pattern Settings',...
'Tag','PolygonSettingsPanel',...
'Clipping','on',...
'Position',[165.2 0.0769230769230769 27.6 22],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'UpdatePolygonButton';

h3 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('UpdatePolygonButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[6.2 5.15384615384615 14.2 1.69230769230769],...
'String','Update',...
'Tag','UpdatePolygonButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'TriggerTypePopup';

h4 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('TriggerTypePopup_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[1.6 7.53846153846154 23.6 1.61538461538462],...
'String',{  'Software'; 'Auto'; 'External Rising'; 'External Falling' },...
'Style','popupmenu',...
'Value',1,...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('TriggerTypePopup_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','TriggerTypePopup');

appdata = [];
appdata.lastValidTag = 'LEDColorPopup';

h5 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('LEDColorPopup_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[1.2 16.7692307692308 23.6 1.61538461538462],...
'String',{  'Red'; 'Green'; 'Blue' },...
'Style','popupmenu',...
'Value',3,...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('LEDColorPopup_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','LEDColorPopup');

appdata = [];
appdata.lastValidTag = 'PatternsText';

h6 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('PatternsText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[14.8 1.38461538461538 10 1.69230769230769],...
'String','0',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('PatternsText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','PatternsText');

appdata = [];
appdata.lastValidTag = 'PatternsLabel';

h7 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('PatternsLabel_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[5.6 1.69230769230769 9 1.15384615384615],...
'String','Patterns:',...
'Style','text',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('PatternsLabel_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','PatternsLabel');

appdata = [];
appdata.lastValidTag = 'BitDepthText';

h8 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('BitDepthText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[14.8 3.07692307692307 10 1.69230769230769],...
'String','1',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('BitDepthText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','BitDepthText');

appdata = [];
appdata.lastValidTag = 'BitDepthLabel';

h9 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('BitDepthLabel_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[4.8 3.38461538461538 9.6 1.15384615384615],...
'String','Bit Depth:',...
'Style','text',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('BitDepthLabel_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','BitDepthLabel');

appdata = [];
appdata.lastValidTag = 'TrigPeriodText';

h10 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('TrigPeriodText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[15 9.61538461538462 10 1.69230769230769],...
'String','0',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('TrigPeriodText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','TrigPeriodText');

appdata = [];
appdata.lastValidTag = 'trigPeriodLabel';

h11 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('trigPeriodLabel_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[3.6 9.84615384615385 11.2 1.15384615384615],...
'String','Trig Period:',...
'Style','text',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('trigPeriodLabel_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','trigPeriodLabel');

appdata = [];
appdata.lastValidTag = 'TrigDelayText';

h12 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('TrigDelayText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[15 11.8461538461538 10 1.69230769230769],...
'String','0',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('TrigDelayText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','TrigDelayText');

appdata = [];
appdata.lastValidTag = 'TrigDelayLabel';

h13 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('TrigDelayLabel_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[4.2 12.2307692307692 10.6 1.15384615384615],...
'String','Trig Delay:',...
'Style','text',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('TrigDelayLabel_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','TrigDelayLabel');

appdata = [];
appdata.lastValidTag = 'PatternExposureText';

h14 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('PatternExposureText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[14.8 14.3076923076923 10 1.69230769230769],...
'String','20',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('PatternExposureText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','PatternExposureText');

appdata = [];
appdata.lastValidTag = 'ExposureLabel';

h15 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('ExposureLabel_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[4.2 14.5384615384616 10.2 1.15384615384615],...
'String','Exposure:',...
'Style','text',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('ExposureLabel_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','ExposureLabel');

appdata = [];
appdata.lastValidTag = 'LEDIntensityText';

h16 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('LEDIntensityText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[14.8 18.9230769230769 10 1.69230769230769],...
'String','100',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('LEDIntensityText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','LEDIntensityText');

appdata = [];
appdata.lastValidTag = 'LEDIntensityLabel';

h17 = uicontrol(...
'Parent',h2,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('LEDIntensityLabel_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[1.2 19.2307692307692 13.6 1.15384615384615],...
'String','LED Intensity:',...
'Style','text',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('LEDIntensityLabel_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','LEDIntensityLabel');

appdata = [];
appdata.lastValidTag = 'PatternPanel';

h18 = uipanel(...
'Parent',h1,...
'Units','characters',...
'Title','Pattern Functions',...
'TitlePosition','centertop',...
'Tag','PatternPanel',...
'Clipping','on',...
'Position',[-0.2 0.538461538461539 75 21.3846153846154],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'PatternList';

h19 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('PatternList_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[2.4 2.84615384615385 30.2 16.8461538461538],...
'String','No Patterns',...
'Style','listbox',...
'Value',1,...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('PatternList_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','PatternList');

appdata = [];
appdata.lastValidTag = 'ThumbnailAxes';

h20 = axes(...
'Parent',h18,...
'Units','characters',...
'Position',[34.2 0.846153846153846 18.2 6.53846153846154],...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',[0 0 0],...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[25.142 6.37153846153846 18.373 4.34423076923077],...
'XColor',get(0,'defaultaxesXColor'),...
'XTick',[],...
'XTickLabel',blanks(0),...
'XTickLabelMode','manual',...
'XTickMode','manual',...
'YColor',get(0,'defaultaxesYColor'),...
'YTick',[],...
'YTickLabel',blanks(0),...
'YTickLabelMode','manual',...
'YTickMode','manual',...
'ZColor',get(0,'defaultaxesZColor'),...
'Tag','ThumbnailAxes',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h21 = get(h20,'title');

set(h21,...
'Parent',h20,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.5 1.0764705882353 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h22 = get(h20,'xlabel');

set(h22,...
'Parent',h20,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.489010989010989 -0.0999999999999996 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','cap',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h23 = get(h20,'ylabel');

set(h23,...
'Parent',h20,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0714285714285714 0.488235294117649 1.00005459937205],...
'Rotation',90,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h24 = get(h20,'zlabel');

set(h24,...
'Parent',h20,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','right',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-1.8956043956044 9.20588235294118 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'ROITypePopup';

h25 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('ROITypePopup_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[34.6 18.2307692307692 15.6 1.53846153846154],...
'String',{  'Ellipse'; 'Rectangle'; 'Polygon' },...
'Style','popupmenu',...
'Value',2,...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('ROITypePopup_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','ROITypePopup');

appdata = [];
appdata.lastValidTag = 'LoadImageCheckBox';

h26 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('LoadImageCheckBox_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[34.6 15.6153846153846 17 1.76923076923077],...
'String','Load Image',...
'Style','checkbox',...
'Value',1,...
'Tag','LoadImageCheckBox',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'DefineMultipleCheckBox';

h27 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('DefineMultipleCheckBox_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[34.6 13.6923076923077 19.8 1.76923076923077],...
'String','Define Multiple',...
'Style','checkbox',...
'Value',1,...
'Tag','DefineMultipleCheckBox',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'PatternButton';

h28 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('PatternButton_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[56.2 17.4615384615385 16.2 2.23076923076923],...
'String','Define Patterns',...
'ButtonDownFcn',@(hObject,eventdata)neuroPG('PatternButton_ButtonDownFcn',hObject,eventdata,guidata(hObject)),...
'Tag','PatternButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'PermuteButton';

h29 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('PermuteButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[34.6 11.2307692307692 16.4 2.46153846153846],...
'String','Permute',...
'Tag','PermuteButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ClearPatternButton';

h30 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('ClearPatternButton_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[56.2 9.84615384615385 16.4 2.46153846153846],...
'String','Clear Patterns',...
'Tag','ClearPatternButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'LoadPatternsButton';

h31 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('LoadPatternsButton_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[56.2 15.2307692307692 16.4 2.23076923076923],...
'String','Load Patterns',...
'Tag','LoadPatternsButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'SavePatternsButton';

h32 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('SavePatternsButton_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[56.2 13 16.4 2.23076923076923],...
'String','Save Patterns',...
'Tag','SavePatternsButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'UploadPatternsButton';

h33 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('UploadPatternsButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[56.4 6.53846153846154 16.4 2.46153846153846],...
'String','Upload Patterns',...
'Tag','UploadPatternsButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'RandomizeButton';

h34 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('RandomizeButton_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[34.4 8.30769230769231 16.4 2.46153846153846],...
'String','Randomize',...
'Tag','RandomizeButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'PatternUpButton';

h35 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('PatternUpButton_Callback',hObject,eventdata,guidata(hObject)),...
'FontSize',10,...
'Position',[4.6 0.538461538461539 11.2 2],...
'String',' /\',...
'Tag','PatternUpButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'PatternDownButton';

h36 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('PatternDownButton_Callback',hObject,eventdata,guidata(hObject)),...
'FontSize',10,...
'Position',[16.4 0.538461538461539 11 2],...
'String','\/',...
'Tag','PatternDownButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'AutoStimButton';

h37 = uicontrol(...
'Parent',h18,...
'Callback',@(hObject,eventdata)neuroPG('AutoStimButton_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[286 12 75 33],...
'String','AutoStim',...
'Tag','AutoStimButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'PairedStimButton';

h38 = uicontrol(...
'Parent',h18,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('PairedStimButton_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[56.4 3.69230769230769 16.4 2.46153846153846],...
'String','PairedStim',...
'Tag','PairedStimButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'CameraPanel';

h39 = uipanel(...
'Parent',h1,...
'Units','characters',...
'Title','Microscope Camera',...
'TitlePosition','centertop',...
'Tag','CameraPanel',...
'Clipping','on',...
'Position',[119.8 29.7692307692308 73.2 31.8461538461538],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ExposureLabel';

h40 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Enable','off',...
'FontSize',10,...
'FontWeight','bold',...
'Position',[14.6 24.9230769230769 20.8 1.38461538461538],...
'String','Exposure Time:',...
'Style','text',...
'Tag','ExposureLabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ExposureText';

h41 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('ExposureText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[35.4 24.7692307692308 10 1.69230769230769],...
'String','0.1',...
'Style','edit',...
'Tag','ExposureText',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'MinExposureLabel';

h42 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Enable','off',...
'Position',[2 28.3076923076923 10.4 1.38461538461538],...
'String','.001',...
'Style','text',...
'Tag','MinExposureLabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'MaxExposureLabel';

h43 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Enable','off',...
'Position',[59.2 28.3076923076923 10.4 1.38461538461538],...
'String','2.000',...
'Style','text',...
'Tag','MaxExposureLabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text5';

h44 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Enable','off',...
'Max',2,...
'Position',[29.2 28.3076923076923 10.4 2.07692307692308],...
'String',{  '1.000'; '  |' },...
'Style','text',...
'Tag','text5',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ExposureSlider';

h45 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@(hObject,eventdata)neuroPG('ExposureSlider_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Max',2,...
'Min',1e-05,...
'Position',[2.4 26.5384615384615 64.4 1.76923076923077],...
'String','Exposure',...
'Style','slider',...
'Value',0.1,...
'ButtonDownFcn',@(hObject,eventdata)neuroPG('ExposureSlider_ButtonDownFcn',hObject,eventdata,guidata(hObject)),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('ExposureSlider_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','ExposureSlider');

appdata = [];
appdata.lastValidTag = 'HistogramAxes';

h46 = axes(...
'Parent',h39,...
'Units','characters',...
'Position',[3 10.0769230769231 63.8 11.6153846153846],...
'CameraPosition',[128.5 688128 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',[0 0 0],...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[25.142 6.37153846153846 18.373 4.34423076923077],...
'XColor',get(0,'defaultaxesXColor'),...
'XLim',[1 256],...
'XLimMode','manual',...
'XTick',[],...
'XTickLabel',blanks(0),...
'XTickLabelMode','manual',...
'XTickMode','manual',...
'YColor',get(0,'defaultaxesYColor'),...
'YLim',[0 1376256],...
'YLimMode','manual',...
'YTick',[],...
'YTickLabel',blanks(0),...
'YTickLabelMode','manual',...
'YTickMode','manual',...
'ZColor',get(0,'defaultaxesZColor'),...
'Tag','HistogramAxes',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h47 = get(h46,'title');

set(h47,...
'Parent',h46,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[128.5 1435498.80794702 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h48 = get(h46,'xlabel');

set(h48,...
'Parent',h46,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[127.700626959248 -77471.3642384107 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','cap',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h49 = get(h46,'ylabel');

set(h49,...
'Parent',h46,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-4.19592476489026 679013.721854304 1.00005459937205],...
'Rotation',90,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h50 = get(h46,'zlabel');

set(h50,...
'Parent',h46,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','right',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-491.813479623824 2574783.57615894 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'AutoButton';

h51 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('AutoButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[3 8.30769230769231 10 1.76923076923077],...
'String','Auto',...
'Tag','AutoButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'AutoCheckBox';

h52 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('AutoCheckBox_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[13 8.30769230769231 10.2 1.76923076923077],...
'String','Auto',...
'Style','checkbox',...
'Tag','AutoCheckBox',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'MinHistText';

h53 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('MinHistText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[25.2 8.38461538461539 8 1.69230769230769],...
'String','0',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('MinHistText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','MinHistText');

appdata = [];
appdata.lastValidTag = 'MaxHistText';

h54 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('MaxHistText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[33 8.38461538461539 8 1.69230769230769],...
'String','255',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('MaxHistText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','MaxHistText');

appdata = [];
appdata.lastValidTag = 'SnapshotButton';

h55 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('SnapshotButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'FontSize',12,...
'Position',[21.6 3.69230769230769 25.2 3.92307692307692],...
'String','Snapshot',...
'Tag','SnapshotButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ShowSnapCheckBox';

h56 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('ShowSnapCheckBox_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[2.2 4.15384615384615 17.4 1.76923076923077],...
'String','Show Snap',...
'Style','checkbox',...
'Value',1,...
'Tag','ShowSnapCheckBox',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'SaveSnapCheckBox';

h57 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('SaveSnapCheckBox_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[2.2 5.76923076923077 17.4 1.76923076923077],...
'String','Save Snap',...
'Style','checkbox',...
'Value',1,...
'Tag','SaveSnapCheckBox',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'CameraCheckbox';

h58 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('CameraCheckbox_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[-0.2 30 4.4 1.76923076923077],...
'String',blanks(0),...
'Style','checkbox',...
'Tag','CameraCheckbox',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'VideoModePanel';

h59 = uibuttongroup(...
'Parent',h39,...
'Units','characters',...
'Title','Video Mode',...
'Tag','VideoModePanel',...
'Clipping','on',...
'Position',[48.8 3.76923076923077 21.6 5.15384615384615],...
'SelectedObject',[],...
'SelectionChangeFcn',@(hObject,eventdata)neuroPG('VideoModePanel_SelectionChangeFcn',get(hObject,'SelectedObject'),eventdata,guidata(get(hObject,'SelectedObject'))),...
'OldSelectedObject',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'BrightFieldRadio';

h60 = uicontrol(...
'Parent',h59,...
'Units','characters',...
'Enable','off',...
'Position',[1 2.07692307692307 16.4 1.76923076923077],...
'String','Bright Field',...
'Style','radiobutton',...
'Value',1,...
'Tag','BrightFieldRadio',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'FluorescenceRadio';

h61 = uicontrol(...
'Parent',h59,...
'Units','characters',...
'Enable','off',...
'Position',[1 0.461538461538462 19 1.76923076923077],...
'String','Fluorescence',...
'Style','radiobutton',...
'Tag','FluorescenceRadio',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ContrastGainCheckbox';

h62 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)neuroPG('ContrastGainCheckbox_Callback',hObject,eventdata,guidata(hObject)),...
'CData',[],...
'Enable','off',...
'Position',[8.4 22.6923076923077 19 1.69230769230769],...
'String','Contrast Gain',...
'Style','checkbox',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('ContrastGainCheckbox_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'UserData',[],...
'Tag','ContrastGainCheckbox');

appdata = [];
appdata.lastValidTag = 'LightingCheckbox';

h63 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)neuroPG('LightingCheckbox_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[30.6 22.6923076923077 18.2 1.69230769230769],...
'String','Lighting Gain',...
'Style','checkbox',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('LightingCheckbox_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','LightingCheckbox');

appdata = [];
appdata.lastValidTag = 'CamShowButton';

h64 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('CamShowButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[53 22.6923076923077 13.8 1.92307692307692],...
'String','Hide',...
'Tag','CamShowButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'StackCheckbox';

h65 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('StackCheckbox_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[6.6 2.76923076923077 11 1.76923076923077],...
'String','Stack',...
'Style','checkbox',...
'Value',1,...
'Tag','StackCheckbox',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text24';

h66 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Enable','off',...
'FontAngle','oblique',...
'FontSize',7,...
'Position',[3 3.15384615384615 2.8 1.30769230769231],...
'String','|__',...
'Style','text',...
'Tag','text24',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'FlCaptureTimeText';

h67 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('FlCaptureTimeText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[61.8 1.92307692307692 8 1.69230769230769],...
'String','0.75',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('FlCaptureTimeText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','FlCaptureTimeText');

appdata = [];
appdata.lastValidTag = 'FlCaptureTimeLabel';

h68 = uicontrol(...
'Parent',h39,...
'Units','characters',...
'Enable','off',...
'Position',[33.8 1.84615384615385 27.6 1.38461538461538],...
'String','Fluorescence Capture Time',...
'Style','text',...
'Tag','FlCaptureTimeLabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'DAQPanel';

h69 = uipanel(...
'Parent',h1,...
'Units','characters',...
'Title','DAQ Controls',...
'TitlePosition','centertop',...
'Tag','DAQPanel',...
'Clipping','on',...
'Position',[-0.2 22.4615384615385 120.2 39.1538461538462],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'DaqAxes1';

h70 = axes(...
'Parent',h69,...
'Units','characters',...
'Position',[24.4 24.9230769230769 90.2 11.6153846153846],...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[25.142 6.37153846153846 18.373 4.34423076923077],...
'XColor',get(0,'defaultaxesXColor'),...
'XLim',get(0,'defaultaxesXLim'),...
'XLimMode','manual',...
'YColor',get(0,'defaultaxesYColor'),...
'YLim',get(0,'defaultaxesYLim'),...
'YLimMode','manual',...
'ZColor',get(0,'defaultaxesZColor'),...
'Tag','DaqAxes1',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h71 = get(h70,'title');

set(h71,...
'Parent',h70,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.5 1.04304635761589 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h72 = get(h70,'xlabel');

set(h72,...
'Parent',h70,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.497782705099778 -0.155629139072848 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','cap',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h73 = get(h70,'ylabel');

set(h73,...
'Parent',h70,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0631929046563193 0.493377483443709 1.00005459937205],...
'Rotation',90,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h74 = get(h70,'zlabel');

set(h74,...
'Parent',h70,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','right',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.273835920177384 1.22185430463576 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'DaqAxes2';

h75 = axes(...
'Parent',h69,...
'Units','characters',...
'Position',[24.4 6.46153846153846 90.2 11.6153846153846],...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[25.142 6.37153846153846 18.373 4.34423076923077],...
'XColor',get(0,'defaultaxesXColor'),...
'YColor',get(0,'defaultaxesYColor'),...
'ZColor',get(0,'defaultaxesZColor'),...
'Tag','DaqAxes2',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h76 = get(h75,'title');

set(h76,...
'Parent',h75,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.5 1.04304635761589 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h77 = get(h75,'xlabel');

set(h77,...
'Parent',h75,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.497782705099778 -0.155629139072848 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','cap',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h78 = get(h75,'ylabel');

set(h78,...
'Parent',h75,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0631929046563193 0.493377483443708 1.00005459937205],...
'Rotation',90,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.SerializedAnnotationV7 = struct(...
    'LegendInformation', struct(...
    'IconDisplayStyle', 'on'));

h79 = get(h75,'zlabel');

set(h79,...
'Parent',h75,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','right',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.273835920177384 2.8112582781457 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], appdata} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'DaqSlider1';

h80 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@(hObject,eventdata)neuroPG('DaqSlider1_Callback',hObject,eventdata,guidata(hObject)),...
'Min',-3,...
'Position',[10.2 24.9230769230769 4.4 11.6153846153846],...
'String',{  'Slider' },...
'Style','slider',...
'Value',1,...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('DaqSlider1_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','DaqSlider1');

appdata = [];
appdata.lastValidTag = 'DaqSlider2';

h81 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@(hObject,eventdata)neuroPG('DaqSlider2_Callback',hObject,eventdata,guidata(hObject)),...
'CData',[],...
'Min',-3,...
'Position',[10.4 6.53846153846154 4.2 11.6153846153846],...
'String',{  'Slider' },...
'Style','slider',...
'Value',1,...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('DaqSlider2_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'UserData',[],...
'Tag','DaqSlider2');

appdata = [];
appdata.lastValidTag = 'DaqSlider1X';

h82 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@(hObject,eventdata)neuroPG('DaqSlider1X_Callback',hObject,eventdata,guidata(hObject)),...
'Max',50000,...
'Min',1,...
'Position',[34.6 21.0769230769231 70.2 2.07692307692308],...
'String',{  'Slider' },...
'Style','slider',...
'Value',50000,...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('DaqSlider1X_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','DaqSlider1X');

appdata = [];
appdata.lastValidTag = 'DaqSlider2X';

h83 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@(hObject,eventdata)neuroPG('DaqSlider2X_Callback',hObject,eventdata,guidata(hObject)),...
'Max',50000,...
'Min',1,...
'Position',[34.4 2.69230769230769 70.2 2.07692307692308],...
'String',{  'Slider' },...
'Style','slider',...
'Value',50000,...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('DaqSlider2X_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','DaqSlider2X');

appdata = [];
appdata.lastValidTag = 'edit2';

h84 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('edit2_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','inactive',...
'Position',[1 32.6153846153846 8.6 1.15384615384615],...
'String','Center:',...
'Style','text',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('edit2_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','edit2');

appdata = [];
appdata.lastValidTag = 'DaqYCenter1Text';

h85 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('DaqYCenter1Text_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[1 30.9230769230769 8.6 1.53846153846154],...
'String','A',...
'Style','edit',...
'TooltipString','''Set Plot Central Y Value''',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('DaqYCenter1Text_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','DaqYCenter1Text');

appdata = [];
appdata.lastValidTag = 'edit5';

h86 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('edit5_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','inactive',...
'Position',[1.2 14.1538461538462 8.6 1.15384615384615],...
'String','Center:',...
'Style','text',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('edit5_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','edit5');

appdata = [];
appdata.lastValidTag = 'DaqYCenter2Text';

h87 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('DaqYCenter2Text_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[1.2 12.5384615384615 8.6 1.53846153846154],...
'String','A',...
'Style','edit',...
'TooltipString','''Set Plot Central Y Value''',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('DaqYCenter2Text_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','DaqYCenter2Text');

appdata = [];
appdata.lastValidTag = 'TimeWindow1Label';

h88 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('TimeWindow1Label_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','inactive',...
'FontSize',10,...
'FontWeight','bold',...
'Position',[51.8 19 20.8 1.69230769230769],...
'String','Time Window:',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('TimeWindow1Label_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','TimeWindow1Label');

appdata = [];
appdata.lastValidTag = 'TimeWindow1Text';

h89 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('TimeWindow1Text_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[72.6 19 10 1.69230769230769],...
'String','5',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('TimeWindow1Text_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','TimeWindow1Text');

appdata = [];
appdata.lastValidTag = 'TimeWindow2Label';

h90 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('TimeWindow2Label_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','inactive',...
'FontSize',10,...
'FontWeight','bold',...
'Position',[50.2 0.615384615384615 20.8 1.69230769230769],...
'String','Time Window:',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('TimeWindow2Label_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','TimeWindow2Label');

appdata = [];
appdata.lastValidTag = 'TimeWindow2Text';

h91 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('TimeWindow2Text_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[71 0.615384615384615 10 1.69230769230769],...
'String','5',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('TimeWindow2Text_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','TimeWindow2Text');

appdata = [];
appdata.lastValidTag = 'DAQCheckbox';

h92 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('DAQCheckbox_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[-0.2 37.3076923076923 4.4 1.76923076923077],...
'String',blanks(0),...
'Style','checkbox',...
'Tag','DAQCheckbox',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Clamp1ButtonGroup';

h93 = uibuttongroup(...
'Parent',h69,...
'Units','characters',...
'Title','Clamp',...
'TitlePosition','centertop',...
'Tag','Clamp1ButtonGroup',...
'Clipping','on',...
'Position',[1.6 18.3076923076923 13.6 6.23076923076923],...
'SelectedObject',[],...
'SelectionChangeFcn',[],...
'OldSelectedObject',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'V1RadioButton';

h94 = uicontrol(...
'Parent',h93,...
'Units','characters',...
'Position',[1.4 3.23076923076923 9.4 1.76923076923077],...
'String','Volt',...
'Style','radiobutton',...
'Tag','V1RadioButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'I1RadioButton';

h95 = uicontrol(...
'Parent',h93,...
'Units','characters',...
'Position',[1.4 1.76923076923077 9.8 1.76923076923077],...
'String','Curr',...
'Style','radiobutton',...
'Tag','I1RadioButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'None1RadioButton';

h96 = uicontrol(...
'Parent',h93,...
'Units','characters',...
'Position',[1.4 0.307692307692306 9.8 1.76923076923077],...
'String','None',...
'Style','radiobutton',...
'Value',1,...
'Tag','None1RadioButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Clamp2ButtonGroup';

h97 = uibuttongroup(...
'Parent',h69,...
'Units','characters',...
'Title','Clamp',...
'TitlePosition','centertop',...
'Tag','Clamp2ButtonGroup',...
'Clipping','on',...
'Position',[1.6 0.307692307692308 13.6 6.23076923076923],...
'SelectedObject',[],...
'SelectionChangeFcn',[],...
'OldSelectedObject',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'V2RadioButton';

h98 = uicontrol(...
'Parent',h97,...
'Units','characters',...
'Position',[1.4 3.23076923076923 9.4 1.76923076923077],...
'String','Volt',...
'Style','radiobutton',...
'Tag','V2RadioButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'I2RadioButton';

h99 = uicontrol(...
'Parent',h97,...
'Units','characters',...
'Position',[1.4 1.76923076923077 9.8 1.76923076923077],...
'String','Curr',...
'Style','radiobutton',...
'Tag','I2RadioButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'None2RadioButton';

h100 = uicontrol(...
'Parent',h97,...
'Units','characters',...
'Position',[1.4 0.307692307692308 9.8 1.76923076923077],...
'String','None',...
'Style','radiobutton',...
'Value',1,...
'Tag','None2RadioButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Auto1Button';

h101 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('Auto1Button_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[1.6 28.8461538461538 7.2 1.69230769230769],...
'String','Auto',...
'Style','togglebutton',...
'Value',1,...
'SelectionHighlight','off',...
'Tag','Auto1Button',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Auto2Button';

h102 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('Auto2Button_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[1.8 10.4615384615385 7.2 1.69230769230769],...
'String','Auto',...
'Style','togglebutton',...
'Value',1,...
'SelectionHighlight','off',...
'Tag','Auto2Button',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'VoltsPerVolt1Label';

h103 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('edit2_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','inactive',...
'Position',[22.4 21.8461538461538 5.2 1.15384615384615],...
'String','V / V',...
'Style','text',...
'Tag','VoltsPerVolt1Label',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'AmpsPerVolt1Label';

h104 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('edit2_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','inactive',...
'Position',[22.4 20.3846153846154 5.2 1.15384615384615],...
'String','A / V',...
'Style','text',...
'Tag','AmpsPerVolt1Label',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'VoltsPerVolt2Label';

h105 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('edit2_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','inactive',...
'Position',[22.6 3.76923076923077 5.2 1.15384615384615],...
'String','V / V',...
'Style','text',...
'Tag','VoltsPerVolt2Label',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'AmpsPerVolt2Label';

h106 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('edit2_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','inactive',...
'Position',[22.4 2.30769230769231 5.2 1.15384615384615],...
'String','A / V',...
'Style','text',...
'Tag','AmpsPerVolt2Label',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'VFactor1Text';

h107 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('VFactor1Text_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[15 21.7692307692308 7 1.23076923076923],...
'String','1',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('VFactor1Text_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','VFactor1Text');

appdata = [];
appdata.lastValidTag = 'AFactor1Text';

h108 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('AFactor1Text_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[15 20.3846153846154 7 1.23076923076923],...
'String','1',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('AFactor1Text_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','AFactor1Text');

appdata = [];
appdata.lastValidTag = 'VFactor2Text';

h109 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('VFactor2Text_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[15 3.69230769230769 7 1.23076923076923],...
'String','1',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('VFactor2Text_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','VFactor2Text');

appdata = [];
appdata.lastValidTag = 'AFactor2Text';

h110 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('AFactor2Text_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[15 2.30769230769231 7 1.23076923076923],...
'String','1',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('AFactor2Text_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','AFactor2Text');

appdata = [];
appdata.lastValidTag = 'EvaluateLabel';

h111 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('edit2_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','inactive',...
'Position',[93.2 0.923076923076923 9.2 1.15384615384615],...
'String','Evaluate:',...
'Style','text',...
'Tag','EvaluateLabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ChannelPopup';

h112 = uicontrol(...
'Parent',h69,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('ChannelPopup_Callback',hObject,eventdata,guidata(hObject)),...
'CData',[],...
'Position',[103.2 0.769230769230769 14.6 1.53846153846154],...
'String',{  'Channel 1'; 'Channel 2' },...
'Style','popupmenu',...
'Value',1,...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('ChannelPopup_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'UserData',[],...
'Tag','ChannelPopup');

appdata = [];
appdata.lastValidTag = 'PolygonControlsPanel';

h113 = uipanel(...
'Parent',h1,...
'Units','characters',...
'Title','Polygon Controls',...
'TitlePosition','centertop',...
'Tag','PolygonControlsPanel',...
'Clipping','on',...
'Position',[119.8 4.92307692307692 43.6 17.1538461538462],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'PolyMinXText';

h114 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'BackgroundColor',[0 1 0],...
'Callback',@(hObject,eventdata)neuroPG('PolyMinXText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[22.6 11.8461538461538 8 1.69230769230769],...
'String','137',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('PolyMinXText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','PolyMinXText');

appdata = [];
appdata.lastValidTag = 'PolyMaxXText';

h115 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'BackgroundColor',[0 1 0],...
'Callback',@(hObject,eventdata)neuroPG('PolyMaxXText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[30.4 11.8461538461538 8 1.69230769230769],...
'String','672',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('PolyMaxXText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','PolyMaxXText');

appdata = [];
appdata.lastValidTag = 'PolyMinYText';

h116 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'BackgroundColor',[0 1 0],...
'Callback',@(hObject,eventdata)neuroPG('PolyMinYText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[2.6 11.8461538461538 8 1.69230769230769],...
'String','157',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('PolyMinYText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','PolyMinYText');

appdata = [];
appdata.lastValidTag = 'PolyMaxYText';

h117 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'BackgroundColor',[0 1 0],...
'Callback',@(hObject,eventdata)neuroPG('PolyMaxYText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[10.4 11.8461538461538 8 1.69230769230769],...
'String','518',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('PolyMaxYText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','PolyMaxYText');

appdata = [];
appdata.lastValidTag = 'XDimsLabel';

h118 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('XDimsLabel_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[24.8 13.5384615384615 11.6 1.15384615384615],...
'String','Height Dims',...
'Style','text',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('XDimsLabel_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','XDimsLabel');

appdata = [];
appdata.lastValidTag = 'YDimsLabel';

h119 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)PolygonGui('YDimsLabel_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[5.2 13.5384615384615 11 1.15384615384615],...
'String','Width Dims',...
'Style','text',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('YDimsLabel_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','YDimsLabel');

appdata = [];
appdata.lastValidTag = 'CommitButton';

h120 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('CommitButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[30.2 9.38461538461537 9.6 1.69230769230769],...
'String','Commit',...
'Tag','CommitButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'DefaultPatternSizeButton';

h121 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('DefaultPatternSizeButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[30.2 7.6153846153846 9.6 1.76923076923077],...
'String','Default',...
'Tag','DefaultPatternSizeButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'StartPatternButton';

h122 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('StartPatternButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[2.4 8.30769230769229 20.4 2.92307692307692],...
'String','Start Pattern',...
'Tag','StartPatternButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'NextPatternButton';

h123 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('NextPatternButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[2.6 4.38461538461537 20.4 3],...
'String','Next Pattern',...
'Tag','NextPatternButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'StopPatternButton';

h124 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('StopPatternButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[2.6 0.692307692307673 20.4 2.84615384615385],...
'String','Stop Pattern',...
'Tag','StopPatternButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'PolygonCheckbox';

h125 = uicontrol(...
'Parent',h113,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('PolygonCheckbox_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[-0.2 15.3076923076923 4.4 1.76923076923077],...
'String',blanks(0),...
'Style','checkbox',...
'Tag','PolygonCheckbox',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'SmartGrid';

h126 = uipanel(...
'Parent',h1,...
'Units','characters',...
'Title','SmartGrid',...
'TitlePosition','centertop',...
'Tag','SmartGrid',...
'Clipping','on',...
'Position',[76.4 0.538461538461539 41.4 21.4615384615385],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'SGSavePatternsButton';

h127 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('SGSavePatternsButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[22.4 5.61538461538462 16.8 1.76923076923077],...
'String','Save Patterns',...
'Tag','SGSavePatternsButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'RowsText';

h128 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('RowsText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[19.6 17.6923076923077 5.4 1.69230769230769],...
'String','3',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('RowsText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','RowsText');

appdata = [];
appdata.lastValidTag = 'RowsLabel';

h129 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)MinesweeperGui('RowsLabel_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[12.8 17.9230769230769 6.6 1.15384615384615],...
'String','Rows:',...
'Style','text',...
'HitTest','off',...
'Tag','RowsLabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ColumnsLabel';

h130 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'BackgroundColor',[0.933333333333333 0.933333333333333 0.933333333333333],...
'Callback',@(hObject,eventdata)MinesweeperGui('ColumnsLabel_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[25.4 17.9230769230769 9.2 1.15384615384615],...
'String','Columns:',...
'Style','text',...
'HitTest','off',...
'Tag','ColumnsLabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ColumnsText';

h131 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('ColumnsText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[34.6 17.6923076923077 5.4 1.69230769230769],...
'String','3',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('ColumnsText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','ColumnsText');

appdata = [];
appdata.lastValidTag = 'SegmentButton';

h132 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('SegmentButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[17.4 15.1538461538462 11.2 2],...
'String','Segment',...
'Tag','SegmentButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'CombineButton';

h133 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('CombineButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[29.2 15.1538461538462 11 2],...
'String','Combine',...
'Tag','CombineButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'SelectLabel';

h134 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Enable','off',...
'Position',[18.4 13 6.8 1.15384615384615],...
'String','Select:',...
'Style','text',...
'Tag','SelectLabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'AllButton';

h135 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('AllButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[25.6 12.7692307692308 5 1.76923076923077],...
'String','All',...
'Tag','AllButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'NoneButton';

h136 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('NoneButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[31.2 12.7692307692308 7.6 1.76923076923077],...
'String','None',...
'Tag','NoneButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'GridStimButton';

h137 = uicontrol(...
'Parent',h126,...
'Callback',@(hObject,eventdata)neuroPG('GridStimButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[16 12 75 33],...
'String','Grid Stim',...
'Tag','GridStimButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'SmartGridCheckbox';

h138 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('SmartGridCheckbox_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[-0.4 19.5384615384615 4.4 1.76923076923077],...
'String',blanks(0),...
'Style','checkbox',...
'Tag','SmartGridCheckbox',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ExportGroupedButton';

h139 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('ExportGroupedButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[22.4 7.92307692307692 16.8 1.76923076923077],...
'String','Export Grouped',...
'Tag','ExportGroupedButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ExportPatternsButton';

h140 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('ExportPatternsButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[22.4 10.1538461538462 16.8 1.76923076923077],...
'String','Export Patterns',...
'Tag','ExportPatternsButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'RecordTimeLabel';

h141 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Enable','off',...
'Position',[0.8 5.61538461538462 18.4 1.07692307692308],...
'String','Record Time (ms):',...
'Style','text',...
'Tag','RecordTimeLabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'RecordTimeText';

h142 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('RecordTimeText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[4.6 4.23076923076923 12 1.38461538461538],...
'String','1000',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('RecordTimeText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','RecordTimeText');

appdata = [];
appdata.lastValidTag = 'SGShowButton';

h143 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('SGShowButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[3 17.3846153846154 8.6 2.30769230769231],...
'String','Hide',...
'Tag','SGShowButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'SaveHeatmapButton';

h144 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('SaveHeatmapButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[21.8 1 17.2 1.76923076923077],...
'String','Save Grid',...
'Tag','SaveHeatmapButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'AlphaScaleLabel';

h145 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Enable','off',...
'Position',[2.8 13.9230769230769 12 1.07692307692308],...
'String','Alpha Scale',...
'Style','text',...
'Tag','AlphaScaleLabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'AlphaScaleText';

h146 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('AlphaScaleText_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[5.2 12.4615384615385 8 1.38461538461538],...
'String','1',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('AlphaScaleText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','AlphaScaleText');

appdata = [];
appdata.lastValidTag = 'ClearHeatmapButton';

h147 = uicontrol(...
'Parent',h126,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('ClearHeatmapButton_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','off',...
'Position',[21.8 3 17.2 1.76923076923077],...
'String','Clear Grid Data',...
'Tag','ClearHeatmapButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'FilePathPanel';

h148 = uipanel(...
'Parent',h1,...
'Units','characters',...
'Title','File and Path',...
'TitlePosition','centertop',...
'Tag','FilePathPanel',...
'Clipping','on',...
'Position',[120 22.6153846153846 73 7],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'NameLabel';

h149 = uicontrol(...
'Parent',h148,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('NameLabel_Callback',hObject,eventdata,guidata(hObject)),...
'Enable','inactive',...
'FontSize',10,...
'HorizontalAlignment','right',...
'Position',[1.6 0.846153846153846 16.4 2.07692307692308],...
'String','Name:',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('NameLabel_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','NameLabel');

appdata = [];
appdata.lastValidTag = 'NameText';

h150 = uicontrol(...
'Parent',h148,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('NameText_Callback',hObject,eventdata,guidata(hObject)),...
'HorizontalAlignment','left',...
'Position',[17.8 0.846153846153846 46.2 2.07692307692308],...
'String',blanks(0),...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('NameText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','NameText');

appdata = [];
appdata.lastValidTag = 'PathLabel';

h151 = uicontrol(...
'Parent',h148,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Enable','inactive',...
'FontSize',10,...
'HorizontalAlignment','right',...
'Position',[1.6 3.30769230769231 16.2 2.07692307692308],...
'String','Save Path: ',...
'Style','edit',...
'Tag','PathLabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'PathText';

h152 = uicontrol(...
'Parent',h148,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)neuroPG('PathText_Callback',hObject,eventdata,guidata(hObject)),...
'HorizontalAlignment','left',...
'Position',[17.6 3.30769230769231 41.2 2.07692307692308],...
'String','V:\Dan\Electrophysiology Data\',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)neuroPG('PathText_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','PathText');

appdata = [];
appdata.lastValidTag = 'PathSelectButton';

h153 = uicontrol(...
'Parent',h148,...
'Units','characters',...
'Callback',@(hObject,eventdata)neuroPG('PathSelectButton_Callback',hObject,eventdata,guidata(hObject)),...
'FontSize',10,...
'FontWeight','bold',...
'Position',[59.2 3.23076923076923 5 2.15384615384615],...
'String','...',...
'Tag','PathSelectButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % NEUROPG
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % NEUROPG(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % NEUROPG('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % NEUROPG(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig,'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || isprop(fig,'__GUIDEFigure');
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI M-file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = openfig(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    gui_hFigure = openfig(name, singleton, visible);  
    %workaround for CreateFcn not called to create ActiveX
    if feature('HGUsingMATLABClasses')
        peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
        for i=1:length(peers)
            if isappdata(peers(i),'Control')
                actxproxy(peers(i));
            end            
        end
    end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end


